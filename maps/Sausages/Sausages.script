// Scripting by Amaroth, some parts borrowed from Wychor.
const
	HUMAN_PLAYER = 0;
	
	OBJ_SAUSAGE = '<$obj_sausage>: [$00FFFF]';
	OBJ_TIME = '<$obj_time>: [$00FFFF]';
	
	MSG_INTRO = '<$msg_intro_01>';
	
	TIME_LIMIT = 54000;
	
var
	SausagesObj, TimerObj: Integer;
	CampPlaced: Boolean;



procedure GiveUnits(aPlayer: Integer; uCount: Integer; aX, aY: Integer; uType: TKMUnitType);
var
	i: Integer;
begin
	for i := 0 to uCount - 1 do
		Actions.GiveUnit(aPlayer, uType, aX, aY, 4);
end;



procedure OnHousePlanPlaced(aPlayer: Integer; aX, aY: Word; aType: TKMHouseType; aFace: TKMHouseFace);
var
    camp, doorFrontX, doorFrontY: Integer;
begin
    if (aType = htCamp) and not CampPlaced then
    begin
        Actions.PlanRemove(aPlayer, aX, aY);
        camp := Actions.GiveHouse(aPlayer, aType, aX, aY, aFace);
        if camp <> 0 then
        begin
            CampPlaced := True;
			
            if (aFace = toSouth) then
            begin
                Actions.RoadAdd(aX - 2, aY + 1, aPlayer);
                Actions.RoadAdd(aX - 1, aY + 1, aPlayer);
                Actions.RoadAdd(aX, aY + 1, aPlayer);
                Actions.RoadAdd(aX + 1, aY + 1, aPlayer);
				doorFrontX := aX;
				doorFrontY := aY + 1;
            end
			else if (aFace = toWest) then
            begin
                Actions.RoadAdd(aX - 1, aY - 2, aPlayer);
                Actions.RoadAdd(aX - 1, aY - 1, aPlayer);
                Actions.RoadAdd(aX - 1, aY, aPlayer);
                Actions.RoadAdd(aX - 1, aY + 1, aPlayer);
				doorFrontX := aX - 1;
				doorFrontY := aY;
            end
            else if (aFace = toNorth) then
            begin
                Actions.RoadAdd(aX + 2, aY - 1, aPlayer);
                Actions.RoadAdd(aX + 1, aY - 1, aPlayer);
                Actions.RoadAdd(aX, aY - 1, aPlayer);
                Actions.RoadAdd(aX - 1, aY - 1, aPlayer);
				doorFrontX := aX;
				doorFrontY := aY - 1;
            end
			else if (aFace = toEast) then
            begin
                Actions.RoadAdd(aX + 1, aY + 2, aPlayer);
                Actions.RoadAdd(aX + 1, aY + 1, aPlayer);
                Actions.RoadAdd(aX + 1, aY, aPlayer);
                Actions.RoadAdd(aX + 1, aY - 1, aPlayer);
				doorFrontX := aX + 1;
				doorFrontY := aY;
            end;

            GiveUnits(aPlayer, 3, doorFrontX, doorFrontY, utPorter);
            GiveUnits(aPlayer, 2, doorFrontX, doorFrontY, utBuilder);
            GiveUnits(aPlayer, 2, doorFrontX, doorFrontY, utPeasant);
			
            Actions.GiveWares(HUMAN_PLAYER, wtStone, 30);
			Actions.GiveWares(HUMAN_PLAYER, wtWood, 20);
			Actions.GiveWares(HUMAN_PLAYER, wtFish, 40);
			Actions.GiveWares(HUMAN_PLAYER, wtCider, 45);
			Actions.GiveWares(HUMAN_PLAYER, wtTrunk, 0);
			Actions.GiveWares(HUMAN_PLAYER, wtGold, 30);
        end;
    end;
end;



procedure OnMissionStart();
var
    i: Integer;
	startUnits: array of Integer;
begin
	CampPlaced := False;

    SausagesObj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 0, osActive, OBJ_SAUSAGE + IntToStr(States.StatWaresBalance(HUMAN_PLAYER, wtSausages)));
    TimerObj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 1, osActive, OBJ_TIME + Utils.TimeToString(TIME_LIMIT - 0));

    Actions.PlayerMessage(HUMAN_PLAYER, MSG_INTRO, True);
	
	startUnits := States.PlayerGetAllUnits(HUMAN_PLAYER);
    for i := 0 to High(startUnits) do
        Actions.UnitKill(startUnits[i], True);
end;



procedure OnTick(aTick: Integer);
begin
    if (aTick mod 10 = 0) then
    begin
        Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, SausagesObj, OBJ_SAUSAGE + IntToStr(States.StatWaresBalance(HUMAN_PLAYER, wtSausages)));
        Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, TimerObj, OBJ_TIME + Utils.TimeToString(TIME_LIMIT - aTick));
    end;
	
	if (aTick = TIME_LIMIT) then
		Actions.PlayerWin([HUMAN_PLAYER], False);
end;



procedure OnPlayerVictory(aPlayer: Integer);
var
    score: Integer;
begin
    score := States.StatWaresBalance(aPlayer, wtSausages);
    Actions.PlayerMissionResultString(HUMAN_PLAYER, OBJ_SAUSAGE + IntToStr(score));
    Actions.MissionHighscore(score);
end;



procedure OnPlayerDefeat(aPlayer: Integer);
begin
    Actions.MissionHighscore(0);
end;
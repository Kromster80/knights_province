// Knights Province dynamic script.
// Wiki available at: https://github.com/Kromster80/knights_province/wiki
// Kroms's Walkers Script  modified by Klassix


const
  HUMAN_PLAYER = 0;
  DESERTERS_PLAYER = 1;
  GAULS_PLAYER = 2;

  WAVE_INTERVAL = 1800; // Every 3 min
  WAVE_INTERVAL_LATEGAME = 2400; // Every 4 mins
  WAVE_INTERVAL_HARD = 1500; // Every 2,5 min
  WAVE_INTERVAL_LATEGAME_HARD = 2100; // Every 3,5 mins


var
  waveNumber: Integer;
  waveGroups: Integer;
  objWaves1: Integer; // groupcount
  objWaves2: Integer; // direction indicator
  dir_n_obj: Integer; //direction indicator for MissionObj
  dir_w_obj: Integer;
  dir_s_obj: Integer;
  dir_e_obj: Integer;
  gametime_obj: Integer;
  gametime: Integer;


  attacker_alive: Boolean; //checker for ... u know.
  north_spawn: Boolean;
  west_spawn: Boolean;
  south_spawn: Boolean;
  east_spawn: Boolean;
  hardmode: Boolean;

procedure PlayWAV(aPlayer: Integer; const aFilename: string; aVolume: Single);
begin
  Actions.PlayWAV(aPlayer, aFilename, aVolume);
end;

procedure CreateNextWave;
var
  dir: Integer; //Int for attack direction
  locx: Integer; //selfexplaining
  locy: Integer;
  tr_type_medium: Integer;
  tr_type_heavy: Integer;
  faceDir: Integer;
begin
  dir:= Utils.RandomI(4)  //attack direction randomized
  PlayWAV(-1, 'horn.wav', 0.8);

  case dir of
	  0:  begin //North
          locx := 66;
          locy := 8;
          faceDir := 4;
          north_spawn := true;
        end;
    1:  begin //West
          locx := 10;
          locy := 71;
          faceDir := 6;
          west_spawn := true;
        end;
    2:  begin //South
          locx := 74;
          locy := 134;
          faceDir := 0;
          south_spawn := true;
        end;
    3:  begin //East
          locx := 133;
          locy := 69;
          faceDir := 2;
          east_spawn := true;
        end;
	end;

  Actions.GiveGroup(GAULS_PLAYER, utMilitia, locx, locy, faceDir, waveNumber, waveNumber);
  Inc(waveGroups);

  if waveNumber > 14 then  //spawn randomized medium troop
  begin
    tr_type_medium:= Utils.RandomI(3) //Axe, Pike, Bow

    dir := Utils.RandomI(4)  //attack direction randomized

    case dir of
      0:  begin //North
            locx := 80;
            locy := 13;
            faceDir := 4;
            north_spawn := true;
          end;
      1:  begin //West
            locx := 8;
            locy := 61;
            faceDir := 6;
            west_spawn := true;
          end;
      2:  begin //South
            locx := 66;
            locy := 134;
            faceDir := 0;
            south_spawn := true;
          end;
      3:  begin //East
            locx := 133;
            locy := 63;
            faceDir := 2;
            east_spawn := true;
          end;
    end;

    if tr_type_medium = 0 then
      Actions.GiveGroup(GAULS_PLAYER, utAxeFighter, locx, locy, faceDir, waveNumber - 14, waveNumber - 14);
    if tr_type_medium = 1 then
      Actions.GiveGroup(GAULS_PLAYER, utPikeman, locx, locy, faceDir, waveNumber - 14, waveNumber - 14);
    if tr_type_medium = 2 then
      Actions.GiveGroup(GAULS_PLAYER, utBowman, locx, locy, faceDir, waveNumber - 14, waveNumber - 14);
    Inc(waveGroups);
  end;

  if waveNumber > 24 then //24
  begin
    tr_type_heavy:= Utils.RandomI(3)

    dir := Utils.RandomI(4)  //attack direction randomized

    case dir of
      0:  begin //North
            locx := 83;
            locy := 9;
            faceDir := 4;
            north_spawn := true;
          end;
      1:  begin //West
            locx := 9;
            locy := 83;
            faceDir := 6;
            west_spawn := true;
          end;
      2:  begin //South
            locx := 57;
            locy := 134;
            faceDir := 0;
            south_spawn := true;
          end;
      3:  begin //East
            locx := 134;
            locy := 76;
            faceDir := 2;
            east_spawn := true;
          end;
    end;

    if tr_type_heavy = 0 then
      Actions.GiveGroup(GAULS_PLAYER, utSwordsman, locx, locy, faceDir, waveNumber - 24, waveNumber - 24);
    if tr_type_heavy = 1 then
      Actions.GiveGroup(GAULS_PLAYER, utHalberdier, locx, locy, faceDir, waveNumber - 24, waveNumber - 24);
    if tr_type_heavy = 2 then
      Actions.GiveGroup(GAULS_PLAYER, utArbaletman, locx, locy, faceDir, waveNumber - 24, waveNumber - 24);
      
    Inc(waveGroups);
  end;

  // OrderIdleGroups will issue attack orders

  // Next wave will be tougher
  Inc(waveNumber);
end;


procedure Feed;
var
  allUnits: array of Integer;
  I: Integer;
begin
  allUnits := States.PlayerGetAllUnits(GAULS_PLAYER);

  for I := 0 to High(allUnits) do
    Actions.UnitHungerSet(allUnits[I], States.UnitHungerMax);
end;


procedure CheckAlive; //Check if an attacking unit is alive
var
  count: Integer;
begin
  count := Length(States.PlayerGetAllUnits(GAULS_PLAYER));

  If count > 0 then
    attacker_alive := true
  else
  begin
    attacker_alive := false;
    north_spawn := false;
    west_spawn := false;
    south_spawn := false;
    east_spawn := false;
  end;
end;


// Find some random player's unit or house(if no unit alive) and attack it
procedure AttackRandomUnit(aGroup: Integer);
var
  allUnits: array of Integer;
  allHouses: array of Integer;
  I: Integer;
begin
  allUnits := States.PlayerGetAllUnits(HUMAN_PLAYER);
  if Length(allUnits) > 0 then
  begin
    I := Utils.RandomI(Length(allUnits));
    Actions.GroupOrderAttackUnit(aGroup, allUnits[I]);
  end else
  begin
    allHouses := States.PlayerGetAllHouses(HUMAN_PLAYER);
    if Length(allHouses) > 0 then
    begin
      I := Utils.RandomI(Length(allHouses));
      Actions.GroupOrderAttackHouse(aGroup, allHouses[I]);
    end;
  end;
end;


procedure OrderIdleGroups;
var
  allGroups: array of Integer;
  I: Integer;
begin
  allGroups := States.PlayerGetAllGroups(GAULS_PLAYER);

  for I := 0 to High(allGroups) do
  if States.GroupIsIdle(allGroups[I]) then
    AttackRandomUnit(allGroups[I]);
end;


procedure UpdateObjective;
var
  allGroups: array of Integer;
begin
  // Assume that groups never link
  allGroups := States.PlayerGetAllGroups(GAULS_PLAYER);

  Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves1, 'Groups deflected - ' + IntToStr(waveGroups - Length(allGroups)));

  if attacker_alive then
    begin
    Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves2, '<$15>');
      if north_spawn then //North
        Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_n_obj, osActive);

      if west_spawn then //West
        Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_w_obj, osActive);

      if south_spawn then //South
        Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_s_obj, osActive);

      if east_spawn then //East
        Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_e_obj, osActive);
    end;

  if not attacker_alive then
  begin
    Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves2, '<$16>');
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_n_obj, osHidden);
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_w_obj, osHidden);
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_s_obj, osHidden);
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_e_obj, osHidden);
  end;
end;


procedure OnMissionStart;
begin
  //Actions.FogRevealAll(HUMAN_PLAYER)

  waveNumber := 1;
  waveGroups := 0;

  gametime_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 0, osActive, '');
  objWaves1 := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 1, osActive, '');
  objWaves2 := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 2, osActive, '');
  dir_n_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'North!');
  dir_w_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'West!');
  dir_s_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'South!');
  dir_e_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'East!');
  UpdateObjective;

  Actions.PlayerMessageWithButtons(-1, '<$11>', ['Normal Mode', 'Hard Mode'], ['baby.png', 'skull.png'], [1,2], True, True, True);
end;

procedure OnScriptButtonClick(aPlayer: Integer; aTag: Integer);
begin
  if (aTag = 1) then
    begin
      Actions.PlayerMessage(-1, '<$12>', True);
    end;
  if (aTag = 2) then
    begin
      Actions.PlayerMessage(-1, '<$13>', True);
      hardmode := true;
    end;
end;

procedure OnTick(aTick: Integer);
var
  gametime: String;
begin
  if waveNumber < 25 then //25
  begin
    if not States.PlayerDefeated(HUMAN_PLAYER) then
      if (aTick mod WAVE_INTERVAL = 0) and not hardmode then
        CreateNextWave;
      
    if (aTick mod WAVE_INTERVAL_HARD = 0) and hardmode then
      CreateNextWave;
  end;

  if waveNumber >= 25 then //25
  begin
    if not States.PlayerDefeated(HUMAN_PLAYER) then
      if (aTick mod WAVE_INTERVAL_LATEGAME = 0) and not hardmode then
        CreateNextWave;

    if (aTick mod WAVE_INTERVAL_LATEGAME_HARD = 0) and hardmode then
      CreateNextWave;
    end;

  if aTick mod 10 = 0 then
  begin
    gametime := Utils.TimeToString(aTick);
    Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, gametime_obj, 'Gametime: ' + gametime);
    CheckAlive;
  end;

  if aTick mod 30 = 0 then
    if not States.PlayerDefeated(HUMAN_PLAYER) then
      OrderIdleGroups;

  if aTick mod 35 = 0 then
    UpdateObjective;

  // Feed even when defeated
  Feed;
end;

procedure OnPlayerDefeated(aPlayer: Integer);
begin
  if aPlayer = 0 then
    Actions.PlayerMessage(0, '<$14>', True);
end;

// Knights Province dynamic script.
// Wiki available at: https://github.com/Kromster80/knights_province/wiki

// Pascal script for "Town Tutorial"
//
// Notice:
//   This file was made for teaching players the basics of Knights Province.
//
// Current map version: 1.0.7
// Designed for: Knights Province Alpha 8
//

const
  HUMAN_PLAYER = 0;

  ctSchool  = 0;
  ctCottage = 1;
  ctStone   = 2;
  ctWood    = 3;
  ctTavern  = 4;
  ctFood    = 5;
  ctStore   = 6;

  // As we're used to colors are 'ABGR' hex codes sent as cardinal
  COLOR_50_PURPLE = $80FF00B2;

type TObjectiveStates = record
  Done: Boolean;
  ID:   Integer;
end;

type TObjectiveSuccess = record
  // Units
  School, Cottage,
  // Basic supplies
  Stone, Wood, Planks,
  // Food
  Tavern, Fish, Cider,
  // Store
  Store:               TObjectiveStates;
end;

var
  objSuccess:     TObjectiveSuccess;
  fDiscovered,
  fCinRunning:    Boolean;
  fActiveCinType,
  fCinStep,
  fHighl1,
  fHighl2:        Integer;
  fTickCount: Integer;

procedure DoAnimStep;
begin
  if fActiveCinType = ctFood then
  begin
    if fCinStep = 2 then
    begin
      Actions.CinematicFadeIn(3);
      Actions.CinematicViewMoveTo(28, 16, -20.0, 0.05, 3);
    end else if fCinStep = 3 then
    begin
      Actions.CinematicText('<$25>', 1);
    end else if fCinStep = 11 then
    begin
      Actions.CinematicViewMoveTo(16, 25, -20.0, 0.05, 3);
    end else if fCinStep = 19 then
    begin
      Actions.CinematicText('', 1);
      Actions.CinematicFadeOut(2);
    end else if fCinStep = 21 then
    begin
      Actions.CinematicBarsHide;
      Actions.CinematicViewRevert;
      Actions.CinematicFadeIn(2);
    end else if fCinStep = 23 then
    begin
      Actions.CinematicEnd;
      fCinRunning := False;
    end;

    exit;
  end;

  if fCinStep = 2 then
  begin
    Actions.CinematicFadeIn(3);
    case fActiveCinType of
      ctSchool:  Actions.CinematicViewMoveTo(11, 18, -20.0, 0.05, 3);
      ctCottage: Actions.CinematicViewMoveTo(6, 16, -20.0, 0.05, 3);
      ctStone:   Actions.CinematicViewMoveTo(39, 22, -20.0, 0.05, 3);
      ctWood:    Actions.CinematicViewMoveTo(38, 28, -20.0, 0.05, 3);
      ctTavern:  Actions.CinematicViewMoveTo(22, 18, -20.0, 0.05, 3);
      ctStore:   Actions.CinematicViewMoveTo(22, 23, -20.0, 0.05, 3);
    end;
  end else if fCinStep = 3 then
  begin
    case fActiveCinType of
      ctSchool:  Actions.CinematicText('<$20>', 1);
      ctCottage: Actions.CinematicText('<$21>', 1);
      ctStone:   Actions.CinematicText('<$22>', 1);
      ctWood:    Actions.CinematicText('<$23>', 1);
      ctTavern:  Actions.CinematicText('<$24>', 1);
      ctStore:   Actions.CinematicText('<$26>', 1);
    end;
  end else if fCinStep = 11 then
  begin
    Actions.CinematicText('', 1);
    Actions.CinematicFadeOut(2);
  end else if fCinStep = 13 then
  begin
    Actions.CinematicBarsHide;
    Actions.CinematicViewRevert;
    Actions.CinematicFadeIn(2);
  end else if fCinStep = 15 then
  begin
    Actions.CinematicEnd;
    fCinRunning := False;
  end;
end;

procedure ShowMessage(aOverlayID, aPopupID: Integer);
begin
  if aOverlayID = 100 then
  begin
    fDiscovered := True;
    Actions.PlayerOverlaySet(HUMAN_PLAYER, '[$EAEAEA]Why are your units even in this area? O.o[]');
  end else
  begin
    if (aOverlayID <> -1) then
      Actions.PlayerOverlaySet(HUMAN_PLAYER, '<$' + IntToStr(aOverlayID) + '>');

    if (aPopupID <> -1) then
      Actions.PlayerMessage(HUMAN_PLAYER, '<$' + IntToStr(aPopupID) + '>', False);
  end;
end;

procedure CheckVictory;
begin
  if objSuccess.School.Done  and
     objSuccess.Cottage.Done and
     objSuccess.Stone.Done   and
     objSuccess.Wood.Done    and
     objSuccess.Planks.Done  and
     objSuccess.Tavern.Done  and
     objSuccess.Fish.Done    and
     objSuccess.Cider.Done   and
     objSuccess.Store.Done   then
  begin
    Actions.PlayerWin([HUMAN_PLAYER], True);

    // Re-enable construction of tutorial buildings
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htSchool,       False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCottage,      False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htStonecutters, False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htWoodcutters,  False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htSawmill,      False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htTavern,       False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htFisherHut,    False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCiderMaker,   False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htStore,        False);
  end;
end;

procedure UpdateObjectivesStatus;
begin
  // Units
  if (objSuccess.School.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htSchool) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.School.ID, osActive);

  if (objSuccess.Cottage.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htCottage)      and
                                       (States.StatHouseTypeCount(HUMAN_PLAYER, htSchool) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Cottage.ID, osActive);

  // Basic supplies
  if (objSuccess.Stone.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htStonecutters)  and
                                     (States.StatHouseTypeCount(HUMAN_PLAYER, htCottage) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Stone.ID, osActive);

  if (objSuccess.Wood.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htWoodcutters)        and
                                    (States.StatHouseTypeCount(HUMAN_PLAYER, htStonecutters) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Wood.ID, osActive);

  if (objSuccess.Planks.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htSawmill)           and
                                      (States.StatHouseTypeCount(HUMAN_PLAYER, htStonecutters) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Planks.ID, osActive);

  // Food
  if (objSuccess.Tavern.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htTavern)            and
                                      (States.StatHouseTypeCount(HUMAN_PLAYER, htWoodcutters) >= 1) and
                                      (States.StatHouseTypeCount(HUMAN_PLAYER, htSawmill)     >= 1) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Tavern.ID, osActive);

  if (objSuccess.Fish.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htFisherHut)    and
                                    (States.StatHouseTypeCount(HUMAN_PLAYER, htTavern) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Fish.ID, osActive);

  if (objSuccess.Cider.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htCiderMaker)   and
                                     (States.StatHouseTypeCount(HUMAN_PLAYER, htTavern) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Cider.ID, osActive);

  // Store
  if (objSuccess.Store.ID <> -1) and States.PlayerHouseCanBuild(HUMAN_PLAYER, htStore)            and
                                     (States.StatHouseTypeCount(HUMAN_PLAYER, htFisherHut)  >= 1) and
                                     (States.StatHouseTypeCount(HUMAN_PLAYER, htCiderMaker) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Store.ID, osActive);
end;

procedure CheckObjectives;
begin
  // Units
  if (States.StatHouseTypeCount(HUMAN_PLAYER, htSchool) >= 1) and not objSuccess.School.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.School.ID, osCompleted);
    objSuccess.School.ID   := -1;
    objSuccess.School.Done := True;

    Actions.TerrainHighlightDelete(fHighl1);
    fHighl1        := Actions.TerrainHighlightLine(5, 13, 3, 2, 0.25, COLOR_50_PURPLE); // Mark Cottage 1
    fHighl2        := Actions.TerrainHighlightLine(4, 17, 3, 2, 0.25, COLOR_50_PURPLE); // Mark Cottage 2
    fCinRunning    := True;
    fActiveCinType := ctCottage;
    fCinStep       := 0;
    ShowMessage(11, 21);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htSchool,  True);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCottage, False);
  end;

  if (States.StatHouseTypeCount(HUMAN_PLAYER, htCottage) >= 2) and not objSuccess.Cottage.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Cottage.ID, osCompleted);
    objSuccess.Cottage.ID   := -1;
    objSuccess.Cottage.Done := True;

    Actions.TerrainHighlightDelete(fHighl1);
    Actions.TerrainHighlightDelete(fHighl2);
    fHighl1        := Actions.TerrainHighlightLine(41, 21, 3, 2, 0.25, COLOR_50_PURPLE); // Mark Stonecutter's 1
    fHighl2        := Actions.TerrainHighlightLine(36, 18, 3, 2, 0.25, COLOR_50_PURPLE); // Mark Stonecutter's 2
    fCinRunning    := True;
    fActiveCinType := ctStone;
    fCinStep       := 0;
    ShowMessage(12, 22);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCottage, True);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htStonecutters, False);
  end;

  // Basic supplies
  if (States.StatHouseTypeCount(HUMAN_PLAYER, htStonecutters) >= 2) and not objSuccess.Stone.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Stone.ID, osCompleted);
    objSuccess.Stone.ID   := -1;
    objSuccess.Stone.Done := True;

    Actions.TerrainHighlightDelete(fHighl1);
    Actions.TerrainHighlightDelete(fHighl2);
    fHighl1        := Actions.TerrainHighlightLine(40, 26, 3, 2, 0.25, COLOR_50_PURPLE); // Mark Woordcutters
    fHighl2        := Actions.TerrainHighlightLine(33, 25, 3, 3, 0.25, COLOR_50_PURPLE); // Mark Sawmill
    fCinRunning    := True;
    fActiveCinType := ctWood;
    fCinStep       := 0;
    ShowMessage(13, 23);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htStonecutters, True);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htWoodcutters,  False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htSawmill,      False);
  end;

  if (States.StatHouseTypeCount(HUMAN_PLAYER, htWoodcutters) >= 1) and not objSuccess.Wood.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Wood.ID, osCompleted);
    objSuccess.Wood.ID   := -1;
    objSuccess.Wood.Done := True;

    Actions.PlayerHouseBlock(HUMAN_PLAYER, htWoodcutters, True);

    if objSuccess.Planks.Done then
    begin
      Actions.TerrainHighlightDelete(fHighl1);
      Actions.TerrainHighlightDelete(fHighl2);
      fHighl1        := Actions.TerrainHighlightLine(20, 16, 4, 3, 0.25, COLOR_50_PURPLE); // Mark Tavern
      fCinRunning    := True;
      fActiveCinType := ctTavern;
      fCinStep       := 0;
      ShowMessage(14, 24);
      Actions.PlayerHouseBlock(HUMAN_PLAYER, htTavern, False);
    end;
  end;

  if (States.StatHouseTypeCount(HUMAN_PLAYER, htSawmill) >= 1) and not objSuccess.Planks.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Planks.ID, osCompleted);
    objSuccess.Planks.ID   := -1;
    objSuccess.Planks.Done := True;

    Actions.PlayerHouseBlock(HUMAN_PLAYER, htSawmill, True);

    if objSuccess.Wood.Done then
    begin
      Actions.TerrainHighlightDelete(fHighl1);
      Actions.TerrainHighlightDelete(fHighl2);
      fHighl1        := Actions.TerrainHighlightLine(20, 16, 4, 3, 0.25, COLOR_50_PURPLE); // Mark Tavern
      fCinRunning    := True;
      fActiveCinType := ctTavern;
      fCinStep       := 0;
      ShowMessage(14, 24);
      Actions.PlayerHouseBlock(HUMAN_PLAYER, htTavern, False);
    end;
  end;

  // Food
  if (States.StatHouseTypeCount(HUMAN_PLAYER, htTavern) >= 1) and not objSuccess.Tavern.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Tavern.ID, osCompleted);
    objSuccess.Tavern.ID   := -1;
    objSuccess.Tavern.Done := True;

    Actions.TerrainHighlightDelete(fHighl1);
    fHighl1        := Actions.TerrainHighlightLine(26, 14, 3, 3, 0.25, COLOR_50_PURPLE); // Mark Fish
    fHighl2        := Actions.TerrainHighlightLine(13, 23, 4, 3, 0.25, COLOR_50_PURPLE); // Mark Cider
    fCinRunning    := True;
    fActiveCinType := ctFood;
    fCinStep       := 0;
    ShowMessage(15, 25);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htTavern, True);
    Actions.PlayerHouseGrant(HUMAN_PLAYER, htFisherHut, True);
    Actions.PlayerHouseGrant(HUMAN_PLAYER, htCiderMaker, True);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htFisherHut, False);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCiderMaker, False);
  end;

  if (States.StatHouseTypeCount(HUMAN_PLAYER, htFisherHut) >= 1) and not objSuccess.Fish.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Fish.ID, osCompleted);
    objSuccess.Fish.ID   := -1;
    objSuccess.Fish.Done := True;

    Actions.PlayerHouseBlock(HUMAN_PLAYER, htFisherHut,  True);

    if objSuccess.Cider.Done then
    begin
      Actions.TerrainHighlightDelete(fHighl1);
      Actions.TerrainHighlightDelete(fHighl2);
      fHighl1        := Actions.TerrainHighlightLine(20, 21, 4, 3, 0.25, COLOR_50_PURPLE); // Mark Store
      fCinRunning    := True;
      fActiveCinType := ctStore;
      fCinStep       := 0;
      ShowMessage(16, 26);
      Actions.PlayerHouseBlock(HUMAN_PLAYER, htStore, False);
    end;
  end;

  if (States.StatHouseTypeCount(HUMAN_PLAYER, htCiderMaker) >= 1) and not objSuccess.Cider.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Cider.ID, osCompleted);
    objSuccess.Cider.ID   := -1;
    objSuccess.Cider.Done := True;

    Actions.PlayerHouseBlock(HUMAN_PLAYER, htCiderMaker, True);

    if objSuccess.Fish.Done then
    begin
      Actions.TerrainHighlightDelete(fHighl1);
      Actions.TerrainHighlightDelete(fHighl2);
      fHighl1        := Actions.TerrainHighlightLine(20, 21, 4, 3, 0.25, COLOR_50_PURPLE); // Mark Store
      fCinRunning    := True;
      fActiveCinType := ctStore;
      fCinStep       := 0;
      ShowMessage(16, 26);
      Actions.PlayerHouseBlock(HUMAN_PLAYER, htStore, False);
    end;
  end;

  // Store
  if (States.StatHouseTypeCount(HUMAN_PLAYER, htStore) >= 1) and not objSuccess.Store.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, objSuccess.Store.ID, osCompleted);
    objSuccess.Store.ID   := -1;
    objSuccess.Store.Done := True;

    Actions.TerrainHighlightDelete(fHighl1);
    ShowMessage(17, -1);
    Actions.PlayerHouseBlock(HUMAN_PLAYER, htStore, True);
  end;
end;

procedure CheckSquare;
begin
  if not fDiscovered then
    if (States.UnitAt(61, 61) > 0) or
       (States.UnitAt(62, 61) > 0) or
       (States.UnitAt(61, 62) > 0) or
       (States.UnitAt(62, 62) > 0) then
      ShowMessage(100, -1);
end;

procedure FeedUnits;
var
  I:               Integer;
  PlayerUnitArray: array of Integer;
begin
  PlayerUnitArray := States.PlayerGetAllUnits(HUMAN_PLAYER);

  for I := 0 to Length(PlayerUnitArray) - 1 do
    Actions.UnitHungerSet(PlayerUnitArray[I], States.UnitHungerMax);
end;

// Disable construction of the houses used during this map,
// except for the first objective's house
procedure BlockHouses;
begin
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htCottage,      True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htStonecutters, True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htWoodcutters,  True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htSawmill,      True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htTavern,       True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htFisherHut,    True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htCiderMaker,   True);
  Actions.PlayerHouseBlock(HUMAN_PLAYER, htStore,        True);
end;

// Initialize the objectives
procedure SetMissionStartValues;
begin
  // Units
  objSuccess.School.ID  := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 1, osHidden, '<$30>');
  objSuccess.Cottage.ID := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 2, osHidden, '<$31>');
  // Basic supplies
  objSuccess.Stone.ID   := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 3, osHidden, '<$32>');
  objSuccess.Wood.ID    := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 4, osHidden, '<$33>');
  objSuccess.Planks.ID  := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 5, osHidden, '<$34>');
  // Food
  objSuccess.Tavern.ID  := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 6, osHidden, '<$35>');
  objSuccess.Fish.ID    := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 7, osHidden, '<$36>');
  objSuccess.Cider.ID   := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 8, osHidden, '<$37>');
  // Store
  objSuccess.Store.ID   := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 9, osHidden, '<$38>');
end;

procedure OnMissionStart;
begin
  BlockHouses;
  SetMissionStartValues;
  UpdateObjectivesStatus;
  FeedUnits;

  fHighl1        := Actions.TerrainHighlightLine(10, 15, 3, 4, 0.25, COLOR_50_PURPLE); // Mark School
  fCinRunning    := True;
  fActiveCinType := ctSchool;
  fCinStep       := 0;
  Actions.CinematicBegin;
  Actions.CinematicViewStore;
  Actions.CinematicBarsShow;
  Actions.CinematicFadeOut(1);
  ShowMessage(10, 20);
end;

procedure OnTick(aTick: Integer);
begin
  if not States.PlayerVictorious(HUMAN_PLAYER) then
  begin
    if aTick mod 10 = 0 then
      UpdateObjectivesStatus;

    if aTick mod 10 = 2 then
      CheckObjectives;

    if aTick mod 10 = 4 then
      CheckVictory;

    if (not objSuccess.Wood.Done) and (aTick mod 10 = 6) then
      FeedUnits;
  end;

  if aTick mod 10 = 8 then
    CheckSquare;

  if fCinRunning and (aTick mod 10 = 3) then
  begin
    if (fCinStep = 0) and (fActiveCinType <> ctSchool) then
    begin
      Actions.CinematicBegin;
      Actions.CinematicViewStore;
      Actions.CinematicBarsShow;
      Actions.CinematicFadeOut(1);
    end;

    DoAnimStep;
    Inc(fCinStep);
  end;

  fTickCount := aTick;
end;


procedure OnPlayerVictory(aPlayer: Integer);
begin
  if aPlayer = HUMAN_PLAYER then
    // Best time is ~20min (12000 ticks)
    // Score is number of seconds remaining before 40min mark
    // Make sure to not set score to -1, it will cause the game to apply the default score
    Actions.MissionHighscore(Utils.MaxI(2400 - fTickCount div 10, 0));
end;

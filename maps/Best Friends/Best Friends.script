{Kinghts Dzapan
  [[ Mission win if enemy 3-10 is defeat and 4 units from Enemy11 are killed in prison ]]
  [[ Mission loost if player 1 or player 2 lost his importatt houses Camp/School ect.  ]]}
// Knights Province dynamic script.
// Wiki available at: https://github.com/Kromster80/knights_province/wiki 



uses
	day_night;
	
const
  Human_Player_1 = 0;
  Human_Player_2 = 1;	
  Player3_HorseScout = 2; 
  Player9_HorseScout = 8; 
  Prison_Enemy_11 = 10;   
  Neutral_Player = 11;
  {All hand Players = -1}
  
//Patrol group points
  PATROL_COUNT = 5;                      // Number of waypoints in patrol route
  PATROL_COUNT_2 = 9;             		 // Number of waypoints in patrol route
  PATROL_COUNT_3 = 5;  					 // Number of waypoints in patrol route 
  
var
    BulidCamp                                                     : array of Boolean;	
	
	
    BuildCamp_P1, BuildCamp_P2, Defense_P1, Defense_P2            :  Integer;	
	BuildBarracks_P1, BuildBarracks_P2  						  :  Integer;	
    PatrolGroup, PatrolGroup2, PatrolGroup3                       :  Integer;                     // Group that will do the patroling 	
    PatrolTarget, PatrolTarget2, PatrolTarget3                    :  Integer;                     // Current patrol waypoint
	DestroyEnemies1, DestroyEnemies2, PrisonGroup, PrisonGroup2   :  Integer;
	OurFriend_Dead, Marker1, Marker2							  :  Integer;
	GlowAlertId1, GlowAlertId2, GlowAlertId3, GlowAlertId4		  :  Integer;
	
    CheckCamp_1, CheckCamp_2, CheckSawmill_1, CheckSawmill_2      :  Boolean; 
	CheckBarracks_1, CheckBarracks_2							  :  Boolean; 
	Trigger1, Trigger2, Trigger3, Trigger4,  Trigger5,  Trigger6  :  Boolean; 
	Trigger7, Trigger8, Trigger9, Trigger10, Trigger11, Trigger12 :  Boolean; 
	Trigger13, Trigger14, Trigger15, Trigger16                    :  Boolean; 
	
    PatrolPoints                                     : array [0..PATROL_COUNT-1] of TKMPoint;     // Waypoints
    PatrolDirection                                  : array [0..PATROL_COUNT-1] of Integer;      // Direction to look at at each waypoint
    PatrolPoints2                                    : array [0..PATROL_COUNT_2-1] of TKMPoint;  
    PatrolDirection2                                 : array [0..PATROL_COUNT_2-1] of Integer;   
    PatrolPoints3                                    : array [0..PATROL_COUNT_3-1] of TKMPoint;  
    PatrolDirection3                                 : array [0..PATROL_COUNT_3-1] of Integer;   	


	
procedure PatrolToNextPoint;                                                                      //Patrol Units 1 + 2 + 3
var
  P, P2, P3: TKMPoint;
  D, D2, D3: Integer;
begin
  // Advance to next waypoint (in a loop)
  PatrolTarget := (PatrolTarget + 1) mod PATROL_COUNT;
  PatrolTarget2 := (PatrolTarget2 + 1) mod PATROL_COUNT_2;
  PatrolTarget3 := (PatrolTarget3 + 1) mod PATROL_COUNT_3;
  
  P := PatrolPoints[PatrolTarget];
  D := PatrolDirection[PatrolTarget];
  P2 := PatrolPoints2[PatrolTarget2];
  D2 := PatrolDirection2[PatrolTarget2];
  P3 := PatrolPoints3[PatrolTarget3];
  D3 := PatrolDirection3[PatrolTarget3];
  
  Actions.GroupOrderWalk(PatrolGroup, P.X, P.Y, D);
  Actions.GroupOrderWalk(PatrolGroup2, P2.X, P2.Y, D2);
  Actions.GroupOrderWalk(PatrolGroup3, P3.X, P3.Y, D3);
end;


	
procedure OnMissionStart;
var
  U: Integer;
  i: Integer;
begin
  SetLength(BulidCamp, States.StatPlayerCount());
  for i := Low(BulidCamp) to High(BulidCamp) do
  BulidCamp[i] := False;	

	
  Actions.PlayerMessage(Human_Player_1, '<$2>', True);	
  Actions.PlayerMessage(Human_Player_2, '<$2>', True);  
  BuildCamp_P1       := Actions.PlayerObjectiveAdd(Human_Player_1, otMain, 0, osHidden, '<$3>');
  BuildCamp_P2       := Actions.PlayerObjectiveAdd(Human_Player_2, otMain, 0, osHidden, '<$3>');
  Defense_P1         := Actions.PlayerObjectiveAdd(Human_Player_1, otMain, 0, osHidden, '<$6>');
  Defense_P2         := Actions.PlayerObjectiveAdd(Human_Player_2, otMain, 0, osHidden, '<$6>');  
  BuildBarracks_P1   := Actions.PlayerObjectiveAdd(Human_Player_1, otMain, 0, osHidden, '<$8>');	//Find friend
  BuildBarracks_P2   := Actions.PlayerObjectiveAdd(Human_Player_2, otMain, 0, osHidden, '<$8>');  	//Find friend
  DestroyEnemies1    := Actions.PlayerObjectiveAdd(Human_Player_1, otMain, 0, osHidden, '<$30>'); 
  DestroyEnemies2    := Actions.PlayerObjectiveAdd(Human_Player_2, otMain, 0, osHidden, '<$30>'); 

  
  DNInitiateScript(6900, 23000);  																	//one day cycle = 35min 
  PrisonGroup := States.GroupAt(64, 29);
  PrisonGroup2 := States.GroupAt(153, 209); 
  OurFriend_Dead := States.UnitAt(73,28);




  // Get the Patrol group
  patrolGroup := States.GroupAt(85, 15);                                                       	     //Initialize waypoints
  patrolPoints[0].X := 139;
  patrolPoints[0].Y := 31;
  patrolDirection[0] := 2;

  patrolPoints[1].X := 110;
  patrolPoints[1].Y := 60;
  patrolDirection[1] := 2;

  patrolPoints[2].X := 92;
  patrolPoints[2].Y := 120;
  patrolDirection[2] := 3;

  patrolPoints[3].X := 98;
  patrolPoints[3].Y := 21;
  patrolDirection[3] := 2;

  patrolPoints[4].X := 122;
  patrolPoints[4].Y := 2;
  patrolDirection[4] := 2;
  
  
    // Get the Patrol_2 group
  patrolGroup2 := States.GroupAt(211, 187);                                                           // Initialize waypoints
  patrolPoints2[0].X := 228;
  patrolPoints2[0].Y := 195;
  patrolDirection2[0] := 0;

  patrolPoints2[1].X := 229;
  patrolPoints2[1].Y := 163;
  patrolDirection2[1] := 7;

  patrolPoints2[2].X := 202;
  patrolPoints2[2].Y := 167;
  patrolDirection2[2] := 0;

  patrolPoints2[3].X := 215;
  patrolPoints2[3].Y := 165;
  patrolDirection2[3] := 0;

  patrolPoints2[4].X := 221;
  patrolPoints2[4].Y := 152;
  patrolDirection2[4] := 7;
  
  patrolPoints2[5].X := 182;
  patrolPoints2[5].Y := 175;
  patrolDirection2[5] := 6;  
  
  patrolPoints2[6].X := 152;
  patrolPoints2[6].Y := 171;
  patrolDirection2[6] := 7;    
   
  patrolPoints2[7].X := 168;
  patrolPoints2[7].Y := 195;
  patrolDirection2[7] := 7;    
   
  patrolPoints2[8].X := 205;
  patrolPoints2[8].Y := 182;
  patrolDirection2[8] := 0;        
  

  // Get the Patrol_3 group
  patrolGroup3 := States.GroupAt(136, 212);                                                            //Initialize waypoints
  patrolPoints3[0].X := 134;
  patrolPoints3[0].Y := 184;
  patrolDirection3[0] := 0;

  patrolPoints3[1].X := 114;
  patrolPoints3[1].Y := 187;
  patrolDirection3[1] := 0;

  patrolPoints3[2].X := 128;
  patrolPoints3[2].Y := 134;
  patrolDirection3[2] := 1;

  patrolPoints3[3].X := 92;
  patrolPoints3[3].Y := 109;
  patrolDirection3[3] := 2;

  patrolPoints3[4].X := 88;
  patrolPoints3[4].Y := 148;
  patrolDirection3[4] := 2;  
end;



Procedure GiveFriend;
  begin;
	 Actions.GiveGroup(Human_Player_1, utAxeFighter, 73, 28, 6, 1, 1);
  end;

	 
	 
procedure FeedPlayer(aHand: Integer);
var
  allUnits: array of Integer;
  I: Integer;
begin
  allUnits := States.PlayerGetAllUnits(aHand);

  for I := 0 to High(allUnits) do
    Actions.UnitHungerSet(allUnits[I], States.UnitHungerMax);
end;

  
  procedure OnTerrainTrigger(aTriggerId: Integer; aUnit: Integer; aX, aY: Word);
begin
  if (aTriggerId = 1) and (not Trigger1) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 1) and (not Trigger1) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin
    Marker1 := Actions.InteractionMarkerAdd(itExclamation, 73.5, 28.5);
    Actions.InteractionMarkerUpdate(marker1, $0000FF, True, 1.8); 	  
	Actions.FogRevealCircle(Human_Player_1, 72, 27, 3);
	Actions.FogRevealCircle(Human_Player_2, 72, 27, 3);
    Actions.PlayerMessage(-1, '<$20>', True);
    trigger1:= True;
  end; 

   if (aTriggerId = 2) and (not Trigger2) and (States.UnitOwner(aUnit) = Human_Player_1) then          
  begin
	Actions.PlayerObjectiveUpdateStatus(Human_Player_1, BuildCamp_P1, osActive);
    trigger2:= True;
  end; 
  
   if (aTriggerId = 3) and (not Trigger3) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, BuildCamp_P2, osActive);
    trigger3:= True;
  end;
  
  if (aTriggerId = 4) and (not Trigger4) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 4) and (not Trigger4) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin 
	  Actions.CinematicTalkingHeadNonModal('SmallVillage.png', '<$9>', '0', 80, 1);
	  GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 117, 15, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
	   GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 117, 15, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
    trigger4:= True;
  end;
  
  if (aTriggerId = 5) and (not Trigger5) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 5) and (not Trigger5) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin 
	  Actions.CinematicTalkingHeadNonModal('SmallVillage.png', '<$10>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 110, 43, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId1 := Actions.AlertAdd(Human_Player_2, 110, 43, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId1, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
	 trigger5:= True;
  end;  
  
  if (aTriggerId = 6) and (not Trigger6) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 6) and (not Trigger6) and (States.UnitOwner(aUnit) = Human_Player_2) then     
  begin
	  Actions.CinematicTalkingHeadNonModal('Unit.png', '<$11>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 74, 9, 'glow.png', 1.5, False);		    		// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId1 := Actions.AlertAdd(Human_Player_2, 74, 9, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId1, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
    trigger6:= True;
  end;   
  
   if (aTriggerId = 7) and (not Trigger7) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 7) and (not Trigger7) and (States.UnitOwner(aUnit) = Human_Player_2) then   begin
	  Actions.CinematicTalkingHeadNonModal('SmallVillage.png', '<$12>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 205, 200, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 205, 200, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
 trigger7:= True;
  end;  
  
   if (aTriggerId = 8) and (not Trigger8) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 8) and (not Trigger8) and (States.UnitOwner(aUnit) = Human_Player_2) then   begin
	  Actions.CinematicTalkingHeadNonModal('SmallVillage.png', '<$13>', '0', 80, 1);
	  GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 132, 155, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 132, 155, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
    trigger8:= True;
  end;   
  
   if (aTriggerId = 9) and (not Trigger9) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 9) and (not Trigger9) and (States.UnitOwner(aUnit) = Human_Player_2) then   begin
	  Actions.CinematicTalkingHeadNonModal('Unit.png', '<$14>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 82, 147, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 82, 147, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
    trigger9:= True;
  end;   
  
  if (aTriggerId = 10) and (not Trigger10) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 10) and (not Trigger10) and (States.UnitOwner(aUnit) = Human_Player_2) then begin
	  Actions.CinematicTalkingHeadNonModal('City.png', '<$15>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 125, 205, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 125, 205, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
 trigger10:= True;
  end;   
  
  if (aTriggerId = 11) and (not Trigger11) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 11) and (not Trigger11) and (States.UnitOwner(aUnit) = Human_Player_2) then begin
	  Actions.CinematicTalkingHeadNonModal('BigCity.png', '<$16>', '0', 80, 1);
      GlowAlertId1 := Actions.AlertAdd(Human_Player_1, 58, 107, 'glow.png', 1.5, False);		    	// Glow on position
      Actions.AlertDuration(GlowAlertId1, 80);
       GlowAlertId2 := Actions.AlertAdd(Human_Player_2, 58, 107, 'glow.png', 1.5, False);  
       Actions.AlertDuration(GlowAlertId2, 80); 
	    Actions.PlayWAV(-1, 'Alarm.wav', 1.0);
 trigger11:= True;
  end;   

   if (aTriggerId = 12) and (not Trigger12) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 12) and (not Trigger12) and (States.UnitOwner(aUnit) = Human_Player_2) then begin
	Actions.CinematicTalkingHeadNonModal('Icon.png', '<$17>', '0', 80, 1);
	Actions.FogRevealCircle(Human_Player_1, 66, 29, 9);
	Actions.FogRevealCircle(Human_Player_2, 66, 29, 9);
    trigger12:= True;
  end;
  
   if (aTriggerId = 13) and (not Trigger13) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 13) and (not Trigger13) and (States.UnitOwner(aUnit) = Human_Player_2) then begin
	Actions.CinematicTalkingHeadNonModal('Icon.png', '<$18>', '0', 80, 1);
	Actions.FogRevealCircle(Human_Player_1, 155, 207, 8);
	Actions.FogRevealCircle(Human_Player_2, 155, 207, 8);
	Marker2 := Actions.InteractionMarkerAdd(itExclamation, 155.5, 202.5);
    Actions.InteractionMarkerUpdate(marker2, $0000FF, True, 1.8); 
 trigger13:= True;
  end; 

   if (aTriggerId = 14) and (not Trigger14) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 14) and (not Trigger14) and (States.UnitOwner(aUnit) = Human_Player_2) then begin
	Actions.CinematicTalkingHeadNonModal('Icon.png', '<$19>', '0', 80, 1);
	Actions.FogRevealCircle(Human_Player_1, 12, 103, 7);
	Actions.FogRevealCircle(Human_Player_2, 12, 103, 7);
    trigger14:= True;
  end;   
  
    if (aTriggerId = 15) and (not Trigger15) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 15) and (not Trigger15) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin
    Actions.PlayerMessage(-1, '<$31>', True);
	Actions.UnitKill(OurFriend_Dead, True);
	Actions.InteractionMarkerRemove(marker1);
	GiveFriend;
    trigger15:= True;
  end;    
  
    if (aTriggerId = 16) and (not Trigger16) and (States.UnitOwner(aUnit) = Human_Player_1) or (aTriggerId = 16) and (not Trigger16) and (States.UnitOwner(aUnit) = Human_Player_2) then       
  begin
    Actions.PlayerMessage(-1, '<$23>', True);
    trigger16:= True;
  end; 
 end;	
  

Procedure CheckBuildingProgressCamp_Player1;															
 begin
   if (States.StatHouseTypeCount(Human_Player_1, htCamp) >= 1) then
    begin
    CheckCamp_1 := true;
    Actions.PlayerMessage(Human_Player_1, '<$4>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, BuildCamp_P1, osHidden);	
	Actions.GroupOrderAttackHouse(States.GroupAt(93, 43), States.HouseAt(165, 21));						 	//Player 1 fort will be destroyed after Camp is built
    end;
end;

Procedure CheckBuildingProgressCamp_Player2;															
 begin
   if (States.StatHouseTypeCount(Human_Player_2, htCamp) >= 1) then  
    begin
    CheckCamp_2 := true;
    Actions.PlayerMessage(Human_Player_2, '<$4>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, BuildCamp_P2, osHidden);
	Actions.GroupOrderAttackHouse(States.GroupAt(135, 135), States.HouseAt(170, 106));						//Player 2 fort will be destroyed after Camp is built
    end;
 end;


Procedure CheckBuildingProgressSawmill_1;															
 begin
   if (States.StatHouseTypeCount(Human_Player_1, htSawmill) >= 1) then
    begin
    CheckSawmill_1 := true;
    Actions.PlayerMessage(Human_Player_1, '<$5>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, Defense_P1, osActive);	
    end;
end;

Procedure CheckBuildingProgressSawmill_2;															
 begin	 
   if (States.StatHouseTypeCount(Human_Player_2, htSawmill) >= 1) then  
    begin
    CheckSawmill_2 := true;
    Actions.PlayerMessage(Human_Player_2, '<$5>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, Defense_P2, osActive);
    end;
 end;


Procedure CheckBuildingProgressBarracks_1;															
 begin
   if (States.StatHouseTypeCount(Human_Player_1, htBarracks) >= 1) then
    begin
    CheckBarracks_1 := true;
    Actions.PlayerMessage(Human_Player_1, '<$7>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, BuildBarracks_P1, osActive);	
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, DestroyEnemies1, osActive);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, Defense_P1, osHidden);	
    end;
end;


Procedure CheckBuildingProgressBarracks_2;															
 begin	 
   if (States.StatHouseTypeCount(Human_Player_2, htBarracks) >= 1) then
    begin
    CheckBarracks_2 := true;
    Actions.PlayerMessage(Human_Player_2, '<$7>', True);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, BuildBarracks_P2, osActive);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, DestroyEnemies2, osActive);
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, Defense_P2, osHidden);
    end;
 end;


	

procedure OnGroupDied(aGroup: Integer; aKiller: Integer);  
begin
  if aGroup = PrisonGroup then
   begin
	Actions.TerrainObjectStateChange(66, 29, 0, 1, True)
	Actions.TerrainObjectStateChange(70, 29, 0, 1, True)
	Actions.TerrainObjectStateChange(72, 28, 0, 1, True)
	
    Actions.PlayerObjectiveUpdateStatus(Human_Player_1, BuildBarracks_P1, osCompleted);				//Find friend
    Actions.PlayerObjectiveUpdateStatus(Human_Player_2, BuildBarracks_P2, osCompleted);  			//Find friend

	Actions.PlayerMessage(-1, '<$21>', True);	
	Actions.FogRevealCircle(Human_Player_1, 72, 27, 3);
	Actions.FogRevealCircle(Human_Player_2, 72, 27, 3);	
   end;

  if aGroup = PrisonGroup2 then
  begin
	Actions.TerrainObjectStateChange(154, 209, 0, 1, True)
	Actions.TerrainObjectStateChange(156, 209, 0, 1, True)
	Actions.TerrainObjectStateChange(155, 203, 0, 1, True)
	
	Actions.PlayerMessage(-1, '<$22>', True);
	Actions.FogRevealCircle(Human_Player_1, 155, 207, 8);
	Actions.FogRevealCircle(Human_Player_2, 155, 207, 8);
	Actions.InteractionMarkerRemove(marker2);
   end;
end;	

		



procedure OnHousePlanPlaced(aPlayer: Integer; aX, aY: Word; aType: TKMHouseType; aFace: TKMHouseFace);
var
  camp: Integer;
begin
  if (aType = htCamp) and not BulidCamp[aPlayer] then
  begin
    Actions.PlanRemove(aPlayer, aX, aY);
    camp := Actions.GiveHouse(aPlayer, aType, aX, aY, aFace);
    if camp <> 0 then
    begin
      BulidCamp[aPlayer] := True;

      //=> Camp needs roads 4x2 !
      if aFace = toSouth then
      begin
        Actions.RoadAdd(aX-2, aY+1, aPlayer);
        Actions.RoadAdd(aX-1, aY+1, aPlayer);
        Actions.RoadAdd(aX, aY+1, aPlayer);
        Actions.RoadAdd(aX+1, aY+1, aPlayer);
        Actions.RoadAdd(aX-2, aY+2, aPlayer);
        Actions.RoadAdd(aX-1, aY+2, aPlayer);
        Actions.RoadAdd(aX, aY+2, aPlayer);
        Actions.RoadAdd(aX+1, aY+2, aPlayer);
      end else
      if aFace = toWest then
      begin
        Actions.RoadAdd(aX-1, aY-2, aPlayer);
        Actions.RoadAdd(aX-1, aY-1, aPlayer);
        Actions.RoadAdd(aX-1, aY, aPlayer);
        Actions.RoadAdd(aX-1, aY+1, aPlayer);
        Actions.RoadAdd(aX-2, aY-2, aPlayer);
        Actions.RoadAdd(aX-2, aY-1, aPlayer);
        Actions.RoadAdd(aX-2, aY, aPlayer);
        Actions.RoadAdd(aX-2, aY+1, aPlayer);
      end else
      if aFace = toEast then
      begin
        Actions.RoadAdd(aX+1, aY, aPlayer);
        Actions.RoadAdd(aX+1, aY +1, aPlayer);
        Actions.RoadAdd(aX+1, aY -1, aPlayer);
        Actions.RoadAdd(aX+1, aY+2, aPlayer);
        Actions.RoadAdd(aX+2, aY, aPlayer);
        Actions.RoadAdd(aX+2, aY +1, aPlayer);
        Actions.RoadAdd(aX+2, aY -1, aPlayer);
        Actions.RoadAdd(aX+2, aY+2, aPlayer);
      end else
      if aFace = toNorth then
      begin
        Actions.RoadAdd(aX-1, aY-1, aPlayer);
        Actions.RoadAdd(aX, aY-1, aPlayer);
        Actions.RoadAdd(aX+1, aY-1, aPlayer);
        Actions.RoadAdd(aX+2, aY-1, aPlayer);
        Actions.RoadAdd(aX-1, aY-2, aPlayer);
        Actions.RoadAdd(aX, aY-2, aPlayer);
        Actions.RoadAdd(aX+1, aY-2, aPlayer);
        Actions.RoadAdd(aX+2, aY-2, aPlayer);
      end;
    //Actions.PlayerMessage(Human_Player_1, '<$16>', True);
    end;
  end;
end;

procedure OnTick(aTick: Integer);
begin			

	DNResolveTick(aTick);

  if CheckCamp_1 = false then
   CheckBuildingProgressCamp_Player1;

  if CheckCamp_2 = false then
   CheckBuildingProgressCamp_Player2;
   
  if CheckSawmill_1 = false then
   CheckBuildingProgressSawmill_1;

  if CheckSawmill_2 = false then
   CheckBuildingProgressSawmill_2;
   
  if CheckBarracks_1 = false then
   CheckBuildingProgressBarracks_1;
 
  if CheckBarracks_2 = false then
   CheckBuildingProgressBarracks_2;
   
  if aTick mod 1200 = 1 then                                                         				// Every 2 min switch to next waypoint
   PatrolToNextPoint;

if aTick mod 9000 = 0 then
  begin
    FeedPlayer(Prison_Enemy_11);
    FeedPlayer(Neutral_Player);
  end;


   {Actions.AlertColor(GlowAlertId1, $FFFFFF, 1.0 - Abs(5.0 - Single(aTick mod 10)) / 5.0);   
    Actions.AlertColor(GlowAlertId2, $FFFFFF, 1.0 - Abs(5.0 - Single(aTick mod 10)) / 5.0);  		 //  Glowing doesn't work}

end;

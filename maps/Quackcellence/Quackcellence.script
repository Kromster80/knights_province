const
    HUMAN_ID = 0; // We've got only one player

var
    BreadObj, WheatTracker, FlourTracker: Integer;
    nextQuack: Integer;
    player_camp_placed: array of Boolean;
    houses, wares: array of Integer;
    modifier_tracker: Integer;

procedure OnMissionStart;
var
    i: Integer;
begin
    BreadObj := Actions.PlayerObjectiveAdd(HUMAN_ID, otMain, 0, osActive, 'Bread: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtBread)));
    FlourTracker := Actions.PlayerObjectiveAdd(HUMAN_ID, otAdditional, 1, osActive, 'Flour: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtFlour)));
    WheatTracker := Actions.PlayerObjectiveAdd(HUMAN_ID, otAdditional, 2, osActive, 'Wheat: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtGrain)));

    nextQuack := 40;
    modifier_tracker := 0;

    Actions.PlayerMessage(HUMAN_ID, '<$2>', True);

    SetLength(player_camp_placed, States.StatPlayerCount());
    for i := Low(player_camp_placed) to High(player_camp_placed) do
        player_camp_placed[i] := False;
end;

procedure OnTick(aTick: Integer);
var
    house, newCnt: Integer;
begin
    if (aTick mod 10 = 0) then
    begin
        Actions.PlayerObjectiveUpdateText(HUMAN_ID, BreadObj, 'Bread: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtBread)));
        Actions.PlayerObjectiveUpdateText(HUMAN_ID, FlourTracker, 'Flour: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtFlour)));
        Actions.PlayerObjectiveUpdateText(HUMAN_ID, WheatTracker, 'Wheat: ' + inttostr(States.StatWaresBalance(HUMAN_ID, wtGrain)));
        for house := 0 to High(houses) do
        begin
            newCnt := States.HouseWareInside(houses[house], wtFish);
            if newCnt > wares[house] then
            begin
                if modifier_tracker = 1 then
                begin
                    Actions.HouseWareAdd(houses[house], wtFish, 1);
                    wares[house] := newCnt + 1;
                    modifier_tracker := 0;
                end else
                begin
                    modifier_tracker := modifier_tracker + 1;
                    wares[house] := newCnt;
                end;
            end else
                wares[house] := newCnt;
        end;
    end;
    if (aTick >= nextQuack) then
    begin
        Actions.PlayWAV(HUMAN_ID, 'Quack.wav', 0.03);

        nextQuack := aTick + 1200 + Utils.RandomI(1800); // Once every 2-5min
    end;
end;

procedure OnPlayerVictory(aPlayer: Integer);
var
    newCnt: Integer;
begin
    newCnt := States.StatWaresBalance(aPlayer, wtBread);
    Actions.PlayerMissionResultString(HUMAN_ID, 'You have stocked|' + IntToStr(newCnt) + '|bread!');
    Actions.MissionHighscore(newCnt);
end;

procedure SpawnUnits(aPlayer: Integer; uCount: Integer; aX, aY: Word; uType: TKMUnitType);
var
    x_offset, y_offset: Integer;
    success: Integer;
begin
    x_offset := 1;
    y_offset := 1;
    success := 0;
    while uCount > 0 do
    begin
        success := Actions.GiveUnit(aPlayer, uType, aX-x_offset, aY+y_offset, 4);
        if success > 0 then
        begin
            uCount := uCount - 1;
        end;
        x_offset := x_offset + 1;
        if x_offset > 3 then
        begin
            x_offset := 1;
            y_offset := y_offset + 1;
        end;
    end;
end;

procedure FillCamp(aHouseID: Integer);
begin
    Actions.HouseWareAdd(aHouseID, wtStone, 70);
    Actions.HouseWareAdd(aHouseID, wtWood, 60);
    Actions.HouseWareAdd(aHouseID, wtFish, 60);
    Actions.HouseWareAdd(aHouseID, wtCider, 60);
    Actions.HouseWareAdd(aHouseID, wtClub, 5);
    Actions.HouseWareAdd(aHouseID, wtGold, 5000);
end;

procedure RemoveStartingUnits(aPlayer: Integer);
var
    i: Integer;
    start_units: Array of Integer;
begin
    start_units := States.PlayerGetAllUnits(aPlayer);
    for i := Low(start_units) to High(start_units) do
    begin
        Actions.UnitKill(start_units[i], true);
    end;
end;

procedure OnHousePlanPlaced(aPlayer: Integer; aX, aY: Word; aType: TKMHouseType; aFace: TKMHouseFace);
var
    camp: Integer;
begin
    if (aType = htCamp) and not player_camp_placed[aPlayer] then
    begin
        Actions.PlanRemove(aPlayer, aX, aY);
        camp := Actions.GiveHouse(aPlayer, aType, aX, aY, aFace);
        if camp <> 0 then
        begin
            player_camp_placed[aPlayer] := True;
            if aFace = toSouth then
            begin
                Actions.RoadAdd(aX-2, aY+1, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX-1, aY+1, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX, aY+1, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX+1, aY+1, aPlayer); // Camp needs roads below
            end else
            if aFace = toWest then
            begin
                Actions.RoadAdd(aX-1, aY-2, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX-1, aY-1, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX-1, aY, aPlayer); // Camp needs roads below
                Actions.RoadAdd(aX-1, aY+1, aPlayer); // Camp needs roads below
            end;
            RemoveStartingUnits(aPlayer);
            SpawnUnits(aPlayer, 4, aX-1, aY, utSerf);
            SpawnUnits(aPlayer, 4, aX+5, aY, utBuilder);
            FillCamp(camp);
        end;
    end;
end;

procedure HouseAdd(aHouse: Integer);
var
    h_owner: Integer;
begin
    h_owner := States.HouseOwner(aHouse);
    if States.HouseType(aHouse) = htFisherHut then
    begin
        SetLength(houses, Length(houses) + 1);
        SetLength(wares, Length(wares) + 1);
        houses[High(houses)] := aHouse;
        wares[High(wares)] := 0;
    end;
end;

procedure OnHouseBuilt(aHouse: Integer);
begin
    HouseAdd(aHouse);
end;

uses
	extra_utils, day_night;

const
	PLAYER_HUMAN = 0;
	PLAYER_HARGRAVE = 1;
	
	OBJ_DEFEAT_ENEMY = '<$obj_defeat_hargrave>';
	OBJ_ENEMY_TROOPS = '<$obj_enemy_troops_left>: [$00FFFF]';
	OBJ_PLAYER_TROOPS = '<$obj_player_troops_left>: [$00FFFF]';
	OBJ_TIME_PASSED = '<$obj_time_passed>: [$00FFFF]';
	OBJ_SCORE = '<$obj_score>: [$00FFFF]';
	
	MSG_INTRO = '<$msg_intro_01>';
	MSG_SCOUT_REPORT = '<$msg_scout_report_01>|<$msg_scout_report_02>|<$msg_scout_report_03>|<$msg_scout_report_04>|<$msg_scout_report_05>|<$msg_scout_report_06>|<$msg_scout_report_07>|<$msg_scout_report_08>|<$msg_scout_report_09>';
	MSG_KNIGHT_CAPTURED = '<$msg_knight_captured_01>|<$msg_knight_captured_02>||<$msg_knight_captured_03>|<$msg_knight_captured_04>|<$msg_knight_captured_05>|<$msg_knight_captured_06>|<$msg_knight_captured_07>|<$msg_knight_captured_08>|<$msg_knight_captured_09>|<$msg_knight_captured_10>|<$msg_knight_captured_11>';
	MSG_OUTRO = '<$msg_outro_01>';
	
	HERO_FULL_REGEN_TIME = 6000.0;
	HERO_HAYTOW_NAME = '<$hero_haytow_name>';
	HERO_HAYTOW_HP = 275;
	HERO_HAYTOW_COLOR = $00B0FF;
	HERO_HARGRAVE_NAME = '<$hero_hargrave_name>';
	HERO_HARGRAVE_HP = 500;
	HERO_HARGRAVE_COLOR = $000000;

var
	HeroHargraveUnit, PlayerStartTroops, EnemyStartTroops, PlayerCurrentTroops, EnemyCurrentTroops, CurrentTick, PlayerWinTick, CurrentScore, EnemyKnightAmount: Integer;
	MainObjID, EnemyTroopsLeftTrackerObjID, PlayerTroopsLeftTrackerObjID, TimePassedTrackerObjID, ScoreTrackerObjID: Integer;
	MainObjSt, EnemyTroopsLeftTrackerObjSt, PlayerTroopsLeftTrackerObjSt, TimePassedTrackerObjSt, ScoreTrackerObjSt: TKMObjectiveStatus;


// 
procedure FeedEnemies();
var
	unitsToFeed: array of Integer;
	i: Integer;
begin
	unitsToFeed := States.PlayerGetAllUnits(PLAYER_HARGRAVE);

	for i := 0 to High(unitsToFeed) do
		Actions.UnitHungerSet(unitsToFeed[i], States.UnitHungerMax);
end;


//
procedure UpdateObjectiveTexts();
begin
	// Recount current values.
	PlayerCurrentTroops := States.StatArmyCount(PLAYER_HUMAN);
	EnemyCurrentTroops := States.StatArmyCount(PLAYER_HARGRAVE);
	CurrentScore := Utils.MaxI(Round(10000000.0 * PlayerCurrentTroops / PlayerStartTroops / CurrentTick), 0);
	
	// Update visual counters.
	Actions.PlayerObjectiveUpdateText(PLAYER_HUMAN, EnemyTroopsLeftTrackerObjID, OBJ_ENEMY_TROOPS + IntToStr(EnemyCurrentTroops));
	Actions.PlayerObjectiveUpdateText(PLAYER_HUMAN, PlayerTroopsLeftTrackerObjID, OBJ_PLAYER_TROOPS + IntToStr(PlayerCurrentTroops));
	Actions.PlayerObjectiveUpdateText(PLAYER_HUMAN, TimePassedTrackerObjID, OBJ_TIME_PASSED + Utils.TimeToString(CurrentTick));
	Actions.PlayerObjectiveUpdateText(PLAYER_HUMAN, ScoreTrackerObjID, OBJ_SCORE + IntToStr(CurrentScore));
end;


// Called if all objectives are completed. Give the player the outro and then the mission will end with victory.
procedure PlayerWins();
begin
	UTObjectiveStatusUpdate(PLAYER_HUMAN, EnemyTroopsLeftTrackerObjID, EnemyTroopsLeftTrackerObjSt, osCompleted);
	UTObjectiveStatusUpdate(PLAYER_HUMAN, PlayerTroopsLeftTrackerObjID, PlayerTroopsLeftTrackerObjSt, osCompleted);
	UTObjectiveStatusUpdate(PLAYER_HUMAN, TimePassedTrackerObjID, TimePassedTrackerObjSt, osCompleted);
	UTObjectiveStatusUpdate(PLAYER_HUMAN, ScoreTrackerObjID, ScoreTrackerObjSt, osCompleted);
	
	if (PlayerWinTick = -1) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_OUTRO, True);
	PlayerWinTick := CurrentTick;
end;


// Periodically called to check whether the players are still supposed to live, and to update the objective statuses.
procedure UpdateObjectives();
begin
	UTObjectiveCheckSurvival(PLAYER_HUMAN, stArmy);
	
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_HARGRAVE, MainObjID, MainObjSt);
	
	UpdateObjectiveTexts();
	
	if (MainObjSt = osCompleted) then
		PlayerWins();
end;


// Finds the first suitable units to be turned into the mission's heroes and makes them change into them.
procedure SetupHeroes();
begin
	UTUnitSetHeroStats(States.UnitAt(38, 78), HERO_HAYTOW_NAME, HERO_HAYTOW_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HAYTOW_HP, 60)), -1, -1, -1, HERO_HAYTOW_COLOR);
	HeroHargraveUnit := States.UnitAt(40, 56);
	UTUnitSetHeroStats(HeroHargraveUnit, HERO_HARGRAVE_NAME, HERO_HARGRAVE_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HARGRAVE_HP, 60)), -1, -1, -1, HERO_HARGRAVE_COLOR);
end;


// Creates the initial objectives for the player.
procedure SetupObjectives();
begin
	PlayerWinTick := -1;
	PlayerStartTroops := Length(States.PlayerGetAllUnits(PLAYER_HUMAN));
	EnemyStartTroops := Length(States.PlayerGetAllUnits(PLAYER_HARGRAVE));
	PlayerCurrentTroops := PlayerStartTroops;
	EnemyCurrentTroops := EnemyStartTroops;
	CurrentTick := 0;
	CurrentScore := 0;
	EnemyKnightAmount := 6;

	UTObjectiveCreate(PLAYER_HUMAN, otMain, 0, osActive, OBJ_DEFEAT_ENEMY, MainObjID, MainObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 1, osActive, '', EnemyTroopsLeftTrackerObjID, EnemyTroopsLeftTrackerObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 2, osActive, '', PlayerTroopsLeftTrackerObjID, PlayerTroopsLeftTrackerObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 3, osActive, '', TimePassedTrackerObjID, TimePassedTrackerObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 4, osActive, '', ScoreTrackerObjID, ScoreTrackerObjSt);
	
	UpdateObjectiveTexts();
end;



procedure OnMissionStart();
begin
	DNInitiateScript(1800, 14400);
	SetupHeroes();
	SetupObjectives();
	
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_INTRO, True);
end;



procedure OnTick(aTick: Integer);
begin
	DNResolveTick(aTick);
	CurrentTick := aTick;
	
	// Give scout report. Hargrave disappears.
	if (aTick = 150) then
	begin
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_SCOUT_REPORT, True);
		Actions.UnitKill(HeroHargraveUnit, True);
	end;

	// No winning this by starving them out.
	if (aTick mod 6000 = 0) then
		FeedEnemies();
	
	if (aTick - 1 = PlayerWinTick) then
		Actions.PlayerWin([PLAYER_HUMAN], False);
		
	if (aTick mod 10 = 0) then
		UpdateObjectives();
end;



procedure OnPlayerVictory(aPlayer: Integer);
begin
	if (aPlayer = PLAYER_HUMAN) then
	begin
		UpdateObjectives();
		Actions.MissionHighscore(CurrentScore);
		Actions.PlayerMissionResultString(PLAYER_HUMAN, OBJ_SCORE + IntToStr(CurrentScore));
	end;
end;



procedure OnUnitBeforeDied(aUnit: Integer; aKillerOwner: Integer);
begin
	// Wait for all the enemy knights to die - then question a prisoner where the enemy lord is.
	if ((States.UnitType(aUnit) = utCavalry) and (States.UnitOwner(aUnit) = PLAYER_HARGRAVE)) then
	begin
		EnemyKnightAmount := EnemyKnightAmount - 1;
		if (EnemyKnightAmount = 0) then
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_KNIGHT_CAPTURED, True);
	end;
end;
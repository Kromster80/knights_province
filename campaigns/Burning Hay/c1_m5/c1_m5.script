uses
	extra_utils, day_night, wagon_supply, attack_ai;

const
	PLAYER_HUMAN = 0;
	PLAYER_HARGRAVE = 1;
	PLAYER_REFUGEES = 2;
	PLAYER_SIEGE_CAMP = 3;
	PLAYER_ROYCE = 4;
	
	OBJ_DESTROY_SIEGE_TOWN = '<$obj_destroy_siege_town>';
	OBJ_DEFEAT_SIEGE_ARMY = '<$obj_defeat_siege_army>';
	OBJ_DESTROY_HARGRAVE_TOWN = '<$obj_destroy_hargrave_town>';
	OBJ_DEFEAT_HARGRAVE_ARMY = '<$obj_defeat_hargrave_army>';
	
	MSG_SUPPLY_NO_STOREHOUSE = '<$msg_supply_no_storehouse>';
	MSG_INTRO = '<$msg_intro_01>';
	MSG_GRAHAM_DIED = '<$msg_graham_died_01>||<$msg_graham_died_02>|<$msg_graham_died_03>|<$msg_graham_died_04>|<$msg_graham_died_05>|<$msg_graham_died_06>|<$msg_graham_died_07>|<$msg_graham_died_08>|<$msg_graham_died_09>';
	MSG_CAPTAIN_ARRIVES = '<$msg_captain_arrives_01>||<$msg_captain_arrives_02>|<$msg_captain_arrives_03>|<$msg_captain_arrives_04>|<$msg_captain_arrives_05>|<$msg_captain_arrives_06>|<$msg_captain_arrives_07>|<$msg_captain_arrives_08>|<$msg_captain_arrives_09>|<$msg_captain_arrives_10>';
	MSG_BOTTOM_BRIDGE_EXPLORED = '<$msg_bridge_explored_01>||<$msg_bridge_explored_02>|<$msg_bridge_explored_03>';
	MSG_FORD_EXPLORED = '<$msg_ford_explored_01>||<$msg_ford_explored_02>|<$msg_ford_explored_03>|<$msg_ford_explored_04>|<$msg_ford_explored_05>';
	MSG_BROKEN_BRIDGE_EXPLORED = '<$msg_broken_bridge_explored_01>||<$msg_broken_bridge_explored_02>|<$msg_broken_bridge_explored_03>|<$msg_broken_bridge_explored_04>|<$msg_broken_bridge_explored_05>';
	MSG_NORTHERN_BRIDGE_EXPLORED = '<$msg_northern_bridge_explored_01>||<$msg_northern_bridge_explored_02>|<$msg_northern_bridge_explored_03>|<$msg_northern_bridge_explored_04>|<$msg_northern_bridge_explored_05>|<$msg_northern_bridge_explored_06>|<$msg_northern_bridge_explored_07>';
	MSG_ENEMY_SUPPLY_SPOTTED = '<$msg_enemy_supply_spotted_01>||<$msg_enemy_supply_spotted_02>|<$msg_enemy_supply_spotted_03>|<$msg_enemy_supply_spotted_04>|<$msg_enemy_supply_spotted_05>|<$msg_enemy_supply_spotted_06>';
	MSG_DUKE_ARRIVES = '<$msg_duke_arrives_01>||<$msg_duke_arrives_02>|<$msg_duke_arrives_03>|<$msg_duke_arrives_04>|<$msg_duke_arrives_05>|<$msg_duke_arrives_06>|<$msg_duke_arrives_07>|<$msg_duke_arrives_08>';
	MSG_HARGRAVE_EXPOSED = '<$msg_hargrave_exposed_01>||<$msg_hargrave_exposed_02>|<$msg_hargrave_exposed_03>|<$msg_hargrave_exposed_04>';
	MSG_HARGRAVE_RUNS = '<$msg_hargrave_runs_01>||<$msg_hargrave_runs_02>|<$msg_hargrave_runs_03>|<$msg_hargrave_runs_04>';
	MSG_OUTRO = '<$msg_outro_01>||<$msg_outro_02>|<$msg_outro_03>|<$msg_outro_04>|<$msg_outro_05>|<$msg_outro_06>|<$msg_outro_07>|<$msg_outro_08>|<$msg_outro_09>|<$msg_outro_10>|||<$msg_outro_11>||<$msg_outro_12>|<$msg_outro_13>|<$msg_outro_14>|<$msg_outro_15>|<$msg_outro_16>|<$msg_outro_17>|<$msg_outro_18>|<$msg_outro_19>|<$msg_outro_20>|<$msg_outro_21>';
	MSG_HARGRAVE_PREPARES_ATTACK = '<$msg_hargrave_prepares_attack_01>||<$msg_hargrave_prepares_attack_02>|<$msg_hargrave_prepares_attack_03>';
	
	CAPTAIN_ARRIVE_TIME = 6000;
	PLAYER_SUPPLY_X = 0;
	PLAYER_SUPPLY_Y = 190;
	PLAYER_SUPPLY_PERIOD = 6000;
	
	ROYCE_SUPPLY_X = 190;
	ROYCE_SUPPLY_Y = 190;
	ROYCE_SUPPLY_PERIOD = 4500;
	ROYCE_BUILD_TIME = 4200;
	ROYCE_ARRIVE_TIME = 18000;
	
	SIEGE_SUPPLY_X = 138;
	SIEGE_SUPPLY_Y = 190;
	SIEGE_SUPPLY_PERIOD = 9000;
	SIEGE_PATROL_START_X = 138;
	SIEGE_PATROL_START_Y = 153;
	SIEGE_PATROL_TRAVEL_TIME = 300;
	
	HARGRAVE_SUPPLY_X = 11;
	HARGRAVE_SUPPLY_Y = 0;
	HARGRAVE_ESCAPED_SUPPLY_X = 190;
	HARGRAVE_ESCAPED_SUPPLY_Y = 107;
	HARGRAVE_SUPPLY_PERIOD = 18000;
	
	HARGRAVE_START_TRAINING = 36000;
	HARGRAVE_ATTACKS_START = 54000;
	HARGRAVE_ATTACKS_PERIOD = 6000;
	
	HERO_FULL_REGEN_TIME = 6000.0;
	HERO_HAYTOW_NAME = '<$hero_haytow_name>';
	HERO_HAYTOW_HP = 300;
	HERO_HAYTOW_COLOR = $00B0FF;
	HERO_ASTON_NAME = '<$hero_aston_name>';
	HERO_ASTON_HP = 250;
	HERO_ASTON_COLOR = $00B0FF;
	HERO_GRAHAM_NAME = '<$hero_graham_name>';
	HERO_GRAHAM_HP = 200;
	HERO_GRAHAM_COLOR = $41592F;
	HERO_ROYCE_NAME = '<$hero_royce_name>';
	HERO_ROYCE_HP = 500;
	HERO_ROYCE_COLOR = $10A010;
	HERO_HARGRAVE_NAME = '<$hero_hargrave_name>';
	HERO_HARGRAVE_HP = 500;
	HERO_HARGRAVE_COLOR = $000000;
	
	TT_BOTTOM_BRIDGE = 1;
	TT_FORD = 2;
	TT_BROKEN_BRIDGE = 3;
	TT_NORTH_BRIDGE = 4;
	TT_ENEMY_SUPPLY_ROAD = 7;

var
	TTFiredBottomBridge, TTFiredFord, TTBrokenBridgeFired, TTNorthBridgeFired, TTEnemySupplyRoadFired, HargraveDefeated, SiegeDefeated, InitialAttackDefeated: Boolean;
	HeroHaytowUnit, HeroGrahamUnit, PlayerWinTick, DefeatSiegeArmyObjID, DestroySiegeTownObjID, DefeatHargraveArmyObjID, DestroyHargraveTownObjID: Integer;
	DefeatSiegeArmyObjSt, DestroySiegeTownObjSt, DefeatHargraveArmyObjSt, DestroyHargraveTownObjSt: TKMObjectiveStatus;
	HargraveAttack, SiegeCampAttack, HargraveSideAttack, RoyceAttack: Integer;
	InitialAttackGroups: array of Integer;


// Initial setup of the Hargrave's attacks.
procedure HargraveAttackSetup();
var
	hargraveDefenseAIDs: array of Integer;
begin
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 66, 37));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 57, 46));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 58, 48));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 53, 48));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 60, 51));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 55, 51));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 50, 51));
	Utils.ArrayAppendI(hargraveDefenseAIDs, UTAIDispositionAt(PLAYER_HARGRAVE, 51, 31));
	
	HargraveAttack := AAICreateAttack(PLAYER_HARGRAVE, [PLAYER_HUMAN, PLAYER_REFUGEES], atBoth);
	AAIAttackSetTimes(HargraveAttack, HARGRAVE_ATTACKS_START, -1, HARGRAVE_ATTACKS_PERIOD);
	AAIAttackSetCompositions(HargraveAttack, [40, 40, 20, 0], 100, True, True, hargraveDefenseAIDs);
	
	HargraveSideAttack := AAICreateAttack(PLAYER_HARGRAVE, [PLAYER_HUMAN, PLAYER_REFUGEES], atBoth);
	AAIAttackSetTimes(HargraveSideAttack, HARGRAVE_ATTACKS_START, -1, HARGRAVE_ATTACKS_PERIOD);
	AAIAttackSetCompositions(HargraveSideAttack, [0, 0, 0, 30], 100, False, True, hargraveDefenseAIDs);
	AAIAttackSetTargetAreaCenter(HargraveSideAttack, 73, 142);
end;


// Initial setup of the siege camp's attacks.
procedure SiegeAttackSetup();
var
	siegeDefenseAIDs: array of Integer;
begin
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 127, 132));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 126, 125));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 127, 118));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 148, 113));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 169, 114));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 141, 147));
	Utils.ArrayAppendI(siegeDefenseAIDs, UTAIDispositionAt(PLAYER_SIEGE_CAMP, 141, 143));
	
	SiegeCampAttack := AAICreateAttack(PLAYER_SIEGE_CAMP, [PLAYER_HUMAN, PLAYER_REFUGEES], atBoth);
	AAIAttackSetTimes(SiegeCampAttack, HARGRAVE_ATTACKS_START, -1, HARGRAVE_ATTACKS_PERIOD);
	AAIAttackSetCompositions(SiegeCampAttack, [15, 15, 15, 0], 80, True, True, siegeDefenseAIDs);
	AAIAttackSetTargetAreaCenter(SiegeCampAttack, 26, 107);
end;


// Makes the enemy groups around the player's start position attack.
procedure InitialAttackSetup();
var
	i: Integer;
begin
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(26, 145));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(37, 148));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(40, 159));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(26, 139));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(33, 142));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(43, 152));
	Utils.ArrayAppendI(InitialAttackGroups, States.GroupAt(46, 159));
	
	for i := 0 to High(InitialAttackGroups) do
		AAIAttackJoinGroup(HargraveAttack, InitialAttackGroups[i]);
end;


// Creates AIDispositions in front of the Hargrave's base, so he has a place to put troops that are to be sent in the attacks, and to send the attacks from. This proved to work better than trying to send the troops bunched up over the narrow bridge and defense lines.
procedure HargraveAttackStartTraining();
begin
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_HARGRAVE_PREPARES_ATTACK, True);

	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 48, 73, 4, gtAntiHorse, 18, 3, 30);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 62, 73, 4, gtAntiHorse, 18, 3, 30);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 55, 74, 4, gtAntiHorse, 18, 9, 30);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 55, 72, 4, gtRanged, 18, 9, 30);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 50, 77, 4, gtMelee, 15, 5, 35);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 55, 77, 4, gtMelee, 15, 5, 35);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 60, 77, 4, gtMelee, 15, 5, 35);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 66, 77, 4, gtMounted, 15, 5, 35);
	Actions.PlayerAIDispositionAdd(PLAYER_HARGRAVE, 66, 73, 4, gtMounted, 15, 5, 30);
end;


// In the not-so probable case the player destroys Hargrave's base first, and only then goes after the siege camp. Hargrave has run, and the siege camp prepares to protect its North defense line as well.
procedure HargraveRunToSiegeCamp();
begin
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_HARGRAVE_RUNS, True);
	
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 143, 95, 0, gtRanged, 21, 7, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 153, 94, 0, gtRanged, 12, 4, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 149, 100, 0, gtRanged, 21, 7, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 149, 94, 0, gtMelee, 12, 4, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 149, 97, 0, gtAntiHorse, 12, 4, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 135, 149, 4, gtMelee, 20, 10, 10);
	Actions.PlayerAIDispositionAdd(PLAYER_SIEGE_CAMP, 136, 147, 4, gtRanged, 15, 5, 15);
	Actions.PlayerAIDispositionRemove(PLAYER_SIEGE_CAMP, 136, 145);
	
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, HARGRAVE_ESCAPED_SUPPLY_X, HARGRAVE_ESCAPED_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtBread, 50, True, False, False);
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, HARGRAVE_ESCAPED_SUPPLY_X, HARGRAVE_ESCAPED_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtAle, 50, True, False, False);
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, HARGRAVE_ESCAPED_SUPPLY_X, HARGRAVE_ESCAPED_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtSausages, 50, True, False, False);
end;


// Called if all objectives are completed. Give the player the outro and then the mission will end with victory.
procedure PlayerWins();
begin
	if (PlayerWinTick = -1) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_OUTRO, True);
	PlayerWinTick := AAICurrentTick;
end;


// Periodically called to check whether the players are still supposed to live, and to update the objective statuses.
procedure UpdateObjectives();
begin
	UTObjectiveCheckSurvival(PLAYER_HUMAN, stBuildings);
	
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_SIEGE_CAMP, DefeatSiegeArmyObjID, DefeatSiegeArmyObjSt);
	UTObjectiveTownUpdate(PLAYER_HUMAN, PLAYER_SIEGE_CAMP, DestroySiegeTownObjID, DestroySiegeTownObjSt);
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_HARGRAVE, DefeatHargraveArmyObjID, DefeatHargraveArmyObjSt);
	UTObjectiveTownUpdate(PLAYER_HUMAN, PLAYER_HARGRAVE, DestroyHargraveTownObjID, DestroyHargraveTownObjSt);
	
	if (DefeatSiegeArmyObjSt = osCompleted)
	and (DestroySiegeTownObjSt = osCompleted)
	and not SiegeDefeated then
	begin
		SiegeDefeated := True;
		WSPlayerDisableSupplies(PLAYER_SIEGE_CAMP);
		if not HargraveDefeated then
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_HARGRAVE_EXPOSED, True);
	end;
		
	if (DefeatHargraveArmyObjSt = osCompleted)
	and (DestroyHargraveTownObjSt = osCompleted)
	and not HargraveDefeated then
	begin
		HargraveDefeated := True;
		WSPlayerDisableSupplies(PLAYER_HARGRAVE);
		if not SiegeDefeated then
			HargraveRunToSiegeCamp();
	end;

	if SiegeDefeated and HargraveDefeated then
		PlayerWins();
end;


// Determine if enemy supply train was/could have been spotted by the player.
function IsEnemySupplyOnRoad(): Boolean;
var
	i: Integer;
	unitsInArea: array of Integer;
	wagonInArea: Boolean;
begin
	unitsInArea := States.UnitsAt(131, 145, 143, 190);
	for i := 0 to High(unitsInArea) do
		if (not wagonInArea) then
		begin
			if (States.UnitType(unitsInArea[i]) = utWagon)
			and (States.UnitOwner(unitsInArea[i]) = PLAYER_SIEGE_CAMP) then
				wagonInArea := True;
		end;
	Result := wagonInArea;
end;


// Initial setup of the enemy supply trains and their guards.
procedure EnemySupplyStart();
begin	
	// The supply train itself.
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y, 1, -1, SIEGE_SUPPLY_PERIOD, wtBread, 100, False, True, False);
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y, 1, -1, SIEGE_SUPPLY_PERIOD, wtSausages, 50, False, True, False);
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y, 1, -1, SIEGE_SUPPLY_PERIOD, wtAle, 150, False, True, False);
	WSAddWagonSupply(PLAYER_SIEGE_CAMP, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y, 1, -1, SIEGE_SUPPLY_PERIOD, wtHorse, 10, False, True, False);
	
	// Hargrave's supply. Goes to the North base, and if that one is defeated first, this is moved to the Siege camp instead.
	WSAddWagonSupply(PLAYER_HARGRAVE, HARGRAVE_SUPPLY_X, HARGRAVE_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtBread, 50, True, False, False);
	WSAddWagonSupply(PLAYER_HARGRAVE, HARGRAVE_SUPPLY_X, HARGRAVE_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtAle, 50, True, False, False);
	WSAddWagonSupply(PLAYER_HARGRAVE, HARGRAVE_SUPPLY_X, HARGRAVE_SUPPLY_Y, WagonCurrentTick + 1, -1, HARGRAVE_SUPPLY_PERIOD, wtSausages, 50, True, False, False);
end;


// Finds the first suitable units to be turned into the mission's heroes and makes them change into them.
procedure SetupHeroes();
begin
	UTUnitSetHeroStats(States.UnitAt(30, 169), HERO_HAYTOW_NAME, HERO_HAYTOW_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HAYTOW_HP, 60)), -1, -1, -1, HERO_HAYTOW_COLOR);
	UTUnitSetHeroStats(States.UnitAt(51, 31), HERO_HARGRAVE_NAME, HERO_HARGRAVE_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HARGRAVE_HP, 60)), -1, -1, -1, HERO_HARGRAVE_COLOR);
	HeroGrahamUnit := States.UnitAt(27, 149);
	UTUnitSetHeroStats(HeroGrahamUnit, HERO_GRAHAM_NAME, HERO_GRAHAM_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_GRAHAM_HP, 60)), -1, -1, -1, HERO_GRAHAM_COLOR);
end;


//
procedure CaptainArrives();
var
	captainGroup, axeGroup: Integer;
begin
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_CAPTAIN_ARRIVES, True);
	
	// 1 sword fighter with 14 axe fighters come as a single group.
	captainGroup := Actions.GiveGroup(PLAYER_HUMAN, utSwordsman, PLAYER_SUPPLY_X + 2, PLAYER_SUPPLY_Y - 3, 0, 1, 1);
	axeGroup := Actions.GiveGroup(PLAYER_HUMAN, utAxeFighter, PLAYER_SUPPLY_X + 2, PLAYER_SUPPLY_Y - 2, 0, 14, 5);
	Actions.GroupOrderLink(axeGroup, captainGroup);
	Actions.GroupSetFormation(captainGroup, 5);
	// 2 walk orders in case one spot is blocked.
	Actions.GroupOrderWalk(captainGroup, 23, 183, 1);
	Actions.GroupOrderWalk(captainGroup, 26, 173, 1);
	
	// Periodically send grain to the closest storehouse.
	WSAddWagonSupply(PLAYER_HUMAN, PLAYER_SUPPLY_X, PLAYER_SUPPLY_Y, WagonCurrentTick + 50, -1, PLAYER_SUPPLY_PERIOD, wtGrain, 200, True, False, False);
	
	// Allow buildings that use grain, even if requirements are not met yet.
	Actions.PlayerHouseGrant(PLAYER_HUMAN, htMill, True);
	Actions.PlayerHouseGrant(PLAYER_HUMAN, htCattleFarm, True);
	Actions.PlayerHouseGrant(PLAYER_HUMAN, htBrewery, True);
	Actions.PlayerHouseGrant(PLAYER_HUMAN, htStables, True);
	
	UTUnitSetHeroStats(States.GroupMember(captainGroup, 0), HERO_ASTON_NAME, HERO_ASTON_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_ASTON_HP, 60)), -1, -1, -1, HERO_ASTON_COLOR);
end;



//
procedure DukeArrives();
var
	dukeGroup: Integer;
begin
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_DUKE_ARRIVES, True);
	
	Actions.PlayerAllianceChange(PLAYER_ROYCE, PLAYER_HUMAN, True, True);
	Actions.PlayerAllianceChange(PLAYER_ROYCE, PLAYER_REFUGEES, True, True);
	
	// 1 knight per 4 supplies. Just to be cool.
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD * 4, wtHorse, 1, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD * 4, wtSword, 1, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD * 4, wtMetalShield, 1, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD * 4, wtMetalArmor, 1, False, True, False);
	
	// Quarter of the attack army per 7.5 minutes.
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtAxe, 15, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtPike, 10, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtBow, 5, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtShield, 15, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtGambeson, 30, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtHorse, 5, False, True, True);
	
	// Some food.
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtBread, 25, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtSausages, 25, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtAle, 50, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtCider, 50, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + ROYCE_BUILD_TIME, -1, ROYCE_SUPPLY_PERIOD, wtFish, 25, False, True, False);
	
	// Create AIdispositions which are also used for attacking.
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 159, 172, 6, gtMelee, 20, 5, 20);
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 159, 184, 6, gtMelee, 20, 5, 20);
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 164, 172, 6, gtAntiHorse, 20, 5, 20);
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 164, 184, 6, gtAntiHorse, 20, 5, 20);
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 163, 178, 6, gtRanged, 20, 5, 20);
	Actions.PlayerAIDispositionAdd(PLAYER_ROYCE, 158, 178, 6, gtMounted, 21, 5, 20);
	
	RoyceAttack := AAICreateAttack(PLAYER_ROYCE, [PLAYER_SIEGE_CAMP, PLAYER_HARGRAVE], atBoth);
	AAIAttackSetTimes(RoyceAttack, ROYCE_ARRIVE_TIME + 600, -1, 600);
	AAIAttackSetCompositions(RoyceAttack, [35, 35, 15, 15], 100, True, True, []);
	
	// Initial troops the duke arrives with.
	dukeGroup := Actions.GiveGroup(PLAYER_ROYCE, utCavalry, 190, 190, 6, 1, 1);
	Actions.GiveGroup(PLAYER_ROYCE, utAxeFighter, 187, 182, 6, 20, 5);
	Actions.GiveGroup(PLAYER_ROYCE, utAxeFighter, 187, 177, 6, 20, 5);
	Actions.GiveGroup(PLAYER_ROYCE, utPikeman,187, 172, 6, 20, 5);
	Actions.GiveGroup(PLAYER_ROYCE, utPikeman, 187, 167, 6, 20, 5);
	Actions.GiveGroup(PLAYER_ROYCE, utBowman, 187, 162, 6, 20, 5);
	Actions.GiveGroup(PLAYER_ROYCE, utHorseScout, 187, 187, 6, 20, 5);
	UTUnitSetHeroStats(States.GroupMember(dukeGroup, 0), HERO_ROYCE_NAME, HERO_ROYCE_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_ROYCE_HP, 60)), -1, -1, -1, HERO_ROYCE_COLOR);
	
	// Initial civilians the duke arrives with.
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utPorter, 175, 170, 6);
	
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	Actions.GiveUnit(PLAYER_ROYCE, utBuilder, 175, 170, 6);
	
	// Give initial camp.
	Actions.GiveHouse(PLAYER_ROYCE, htCamp, 180, 180, toWest);
	Actions.RoadAdd(179, 178, PLAYER_ROYCE);
	Actions.RoadAdd(179, 179, PLAYER_ROYCE);
	Actions.RoadAdd(179, 180, PLAYER_ROYCE);
	Actions.RoadAdd(179, 181, PLAYER_ROYCE);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + 1, WagonCurrentTick + 2, ROYCE_SUPPLY_PERIOD, wtStone, 100, False, True, False);
	WSAddWagonSupply(PLAYER_ROYCE, ROYCE_SUPPLY_X, ROYCE_SUPPLY_Y, WagonCurrentTick + 1, WagonCurrentTick + 2, ROYCE_SUPPLY_PERIOD, wtWood, 100, False, True, False);
	
	// Build the rest of the camp.
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 175);
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 176);
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 177, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 176, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 175, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 173, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 172, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 171, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 170, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 177);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 178);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 179);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 180);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 181);
	Actions.PlanAddRoad(PLAYER_ROYCE, 169, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 170, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 171, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 172, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 173, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 175, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 176, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 177, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 182);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 178);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 179);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 180);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 181);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 178);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 179);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 180);
	Actions.PlanAddRoad(PLAYER_ROYCE, 178, 181);
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 183);
	Actions.PlanAddRoad(PLAYER_ROYCE, 179, 184);
	Actions.PlanAddRoad(PLAYER_ROYCE, 172, 183);
	Actions.PlanAddRoad(PLAYER_ROYCE, 172, 184);
	Actions.PlanAddRoad(PLAYER_ROYCE, 172, 185);
	Actions.PlanAddRoad(PLAYER_ROYCE, 176, 183);
	Actions.PlanAddRoad(PLAYER_ROYCE, 176, 184);
	Actions.PlanAddRoad(PLAYER_ROYCE, 176, 185);
	Actions.PlanAddRoad(PLAYER_ROYCE, 173, 185);
	Actions.PlanAddRoad(PLAYER_ROYCE, 174, 185);
	Actions.PlanAddRoad(PLAYER_ROYCE, 175, 185);
	Actions.PlanAddHouse(PLAYER_ROYCE, htStore, 177, 179, toEast);
	Actions.PlanAddHouse(PLAYER_ROYCE, htTavern, 180, 175, toWest);
	Actions.PlanAddHouse(PLAYER_ROYCE, htTavern, 172, 186, toNorth);
	Actions.PlanAddHouse(PLAYER_ROYCE, htFort, 170, 179, toWest);
	Actions.PlanAddHouse(PLAYER_ROYCE, htBarracks, 180, 184, toWest);
	Actions.PlanAddHouse(PLAYER_ROYCE, htCottage, 169, 176, toSouth);
	Actions.PlanAddHouse(PLAYER_ROYCE, htCottage, 174, 176, toSouth);
	Actions.PlanAddHouse(PLAYER_ROYCE, htCottage, 169, 183, toNorth);
	Actions.PlanAddHouse(PLAYER_ROYCE, htCottage, 174, 183, toNorth);
end;


// Should probably add AAI function that can do this without half reinventing the wheel.
procedure CheckInitialAttackDeafeated();
var
	i: Integer;
begin
	InitialAttackDefeated := True;
	for i := 0 to High(InitialAttackGroups) do
		if (InitialAttackGroups[i] > 0) and (States.GroupMemberCount(InitialAttackGroups[i]) > 0) then
		begin
			InitialAttackDefeated := False;
			Break;
		end;

	if InitialAttackDefeated then
	begin
		// Remove the defending AIDispositions for the purpose of moving the troops to the North.
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 23, 149);
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 27, 149);
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 34, 151);
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 36, 158);
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 36, 162);
		Actions.PlayerAIDispositionRemove(PLAYER_REFUGEES, 30, 155);
		
		// Use the remaining refugees to guard the Northern pass.
		Actions.PlayerAIDispositionAdd(PLAYER_REFUGEES, 24, 125, 0, gtMelee, 15, 5, 15);
		Actions.PlayerAIDispositionAdd(PLAYER_REFUGEES, 29, 125, 0, gtAntiHorse, 15, 5, 15);
		Actions.PlayerAIDispositionAdd(PLAYER_REFUGEES, 27, 128, 0, gtRanged, 18, 6, 15);
		
		// Graham's end.
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_GRAHAM_DIED, True);
		Actions.UnitKill(HeroGrahamUnit, False);
	end;
end;


//
procedure SiegePatrolMove(aTick: Integer);
var
	siegePatrol: Integer;
begin
	if ((aTick / SIEGE_PATROL_TRAVEL_TIME) mod 2 = 0) then
	begin
		siegePatrol := UTAIDispositionAt(PLAYER_SIEGE_CAMP, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y - 4);
		UTAIDispositionMove(PLAYER_SIEGE_CAMP, siegePatrol, SIEGE_PATROL_START_X, SIEGE_PATROL_START_Y, 4);
	end
	else
	begin
		siegePatrol := UTAIDispositionAt(PLAYER_SIEGE_CAMP, SIEGE_PATROL_START_X, SIEGE_PATROL_START_Y);
		UTAIDispositionMove(PLAYER_SIEGE_CAMP, siegePatrol, SIEGE_SUPPLY_X, SIEGE_SUPPLY_Y - 4, 0);
	end;
end;



procedure FeedRefugees();
var
	unitsToFeed: array of Integer;
	i: Integer;
begin
	unitsToFeed := States.PlayerGetAllUnits(PLAYER_REFUGEES);

	for i := 0 to High(unitsToFeed) do
		Actions.UnitHungerSet(unitsToFeed[i], States.UnitHungerMax);
end;


//
procedure OptimizeAI();
begin
	UTOptimizeAIArmyCompositions(PLAYER_HARGRAVE, [320, 0, 320, 0, 320, 0, 320, 0], True);
	UTOptimizeAIHouseWareBlocks(PLAYER_HARGRAVE, [], [], True, True);
	
	UTOptimizeAIArmyCompositions(PLAYER_SIEGE_CAMP, [320, 0, 320, 0, 320, 0, 320, 0], True);
	UTOptimizeAIHouseWareBlocks(PLAYER_SIEGE_CAMP, [], [], True, True);
end;



procedure SetupAI();
begin
	HargraveAttackSetup();
	SiegeAttackSetup();
	InitialAttackSetup();
	
	EnemySupplyStart();
	
	UTPlayerMaxWareDistributions(PLAYER_HARGRAVE);
	UTPlayerMaxWareDistributions(PLAYER_REFUGEES);
	UTPlayerMaxWareDistributions(PLAYER_SIEGE_CAMP);
	UTPlayerMaxWareDistributions(PLAYER_ROYCE);
	Actions.PlayerWareDistribution(PLAYER_HARGRAVE, wtGrain, htSheepyard, 0);
	Actions.PlayerWareDistribution(PLAYER_REFUGEES, wtGrain, htSheepyard, 0);
	Actions.PlayerWareDistribution(PLAYER_SIEGE_CAMP, wtGrain, htSheepyard, 0);
	Actions.PlayerWareDistribution(PLAYER_ROYCE, wtGrain, htSheepyard, 0);
end;


// Creates the initial objectives for the player.
procedure SetupObjectives();
begin
	PlayerWinTick := -1;
	
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 0, osActive, OBJ_DESTROY_SIEGE_TOWN, DestroySiegeTownObjID, DestroySiegeTownObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 1, osActive, OBJ_DEFEAT_SIEGE_ARMY, DefeatSiegeArmyObjID, DefeatSiegeArmyObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 2, osActive, OBJ_DESTROY_HARGRAVE_TOWN, DestroyHargraveTownObjID, DestroyHargraveTownObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 3, osActive, OBJ_DEFEAT_HARGRAVE_ARMY, DefeatHargraveArmyObjID, DefeatHargraveArmyObjSt);
end;



procedure OnMissionStart();
begin
	DNInitiateScript(12000, 14400);
	WSInitiateScript(True);
	AAIInitiateScript(100, 5, 10, 50);
	SetupHeroes();
	SetupAI();
	SetupObjectives();
	
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_INTRO, True);
end;



procedure OnTick(aTick: Integer);
begin
	DNResolveTick(aTick);
	WSResolveTick(aTick);
	AAIResolveTick(aTick);

	if (not SiegeDefeated) and (aTick mod SIEGE_PATROL_TRAVEL_TIME = 0) then
		SiegePatrolMove(aTick);
	
	if not InitialAttackDefeated and (aTick mod 10 = 0) then
		CheckInitialAttackDeafeated();
	
	if (aTick mod 9000 = 0) then
		FeedRefugees();
	
	if (aTick mod 100 = 0) then
		OptimizeAI();
	
	if (aTick = CAPTAIN_ARRIVE_TIME) then
		CaptainArrives();
	
	if (aTick = ROYCE_ARRIVE_TIME) then
		DukeArrives();
	
	if (aTick = HARGRAVE_START_TRAINING) then
		HargraveAttackStartTraining();
		
	if (aTick - 1 = PlayerWinTick) then
		Actions.PlayerWin([PLAYER_HUMAN], False);
		
	if (aTick mod 10 = 0) then
		UpdateObjectives();
end;


procedure OnUnitOwnerChanged(aOldUnit, aNewUnit: Integer);
begin
	WSCheckSendStolenWagon(aOldUnit, aNewUnit);
end;


procedure OnWarriorEquipped(aUnit: Integer; aGroup: Integer);
begin
	if (States.UnitOwner(aUnit) = PLAYER_ROYCE) and (States.UnitType(aUnit) = utCavalry) then
		UTUnitSetHeroStats(aUnit, HERO_ROYCE_NAME, HERO_ROYCE_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_ROYCE_HP, 60)), -1, -1, -1, HERO_ROYCE_COLOR);
end;


procedure OnTerrainTrigger(aTriggerId: Integer; aUnit: Integer; aX, aY: Integer);
begin
	if (States.UnitOwner(aUnit) = PLAYER_HUMAN) then
	begin
		if ((aTriggerId = TT_BOTTOM_BRIDGE)
		and not TTFiredBottomBridge) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_BOTTOM_BRIDGE_EXPLORED, True);
			TTFiredBottomBridge := True;
		end;
		if ((aTriggerId = TT_FORD)
		and not TTFiredFord) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_FORD_EXPLORED, True);
			TTFiredFord := True;
		end;
		if ((aTriggerId = TT_BROKEN_BRIDGE)
		and not TTBrokenBridgeFired) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_BROKEN_BRIDGE_EXPLORED, True);
			TTBrokenBridgeFired := True;
		end;
		if ((aTriggerId = TT_NORTH_BRIDGE)
		and not TTNorthBridgeFired) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_NORTHERN_BRIDGE_EXPLORED, True);
			TTNorthBridgeFired := True;
		end;
		if ((aTriggerId = TT_ENEMY_SUPPLY_ROAD)
		and IsEnemySupplyOnRoad()
		and not TTEnemySupplyRoadFired) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_ENEMY_SUPPLY_SPOTTED, True);
			TTEnemySupplyRoadFired := True
		end;
	end;
end;
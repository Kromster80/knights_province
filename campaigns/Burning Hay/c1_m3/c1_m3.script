uses
	extra_utils, day_night, attack_ai;

const
	PLAYER_HUMAN = 0;
	PLAYER_REFUGEES = 1;
	PLAYER_FISHING_VILLAGE = 2;
	PLAYER_FARM_VILLAGE = 3;
	PLAYER_MARAUDERS = 4;
	
	OBJ_DEFEND_FISHING = '<$obj_defend_fishing>';
	OBJ_DEFEND_FARM = '<$obj_defend_farm>';
	OBJ_DEFEND_REFUGEES = '<$obj_defend_refugees>';
	OBJ_DESTROY_BASE = '<$obj_destroy_town>';
	OBJ_DEFEAT_ARMY = '<$obj_defeat_army>';
	
	MSG_INTRO = '<$msg_intro_01>||<$msg_intro_02>|<$msg_intro_03>|<$msg_intro_04>|<$msg_intro_05>|<$msg_intro_06>|<$msg_intro_07>|<$msg_intro_08>|<$msg_intro_09>';
	MSG_FISHING_THREATENED = '<$msg_fishing_threatened_01>|<$msg_fishing_threatened_02>|<$msg_fishing_threatened_03>|<$msg_fishing_threatened_04>';
	MSG_RAIDER_NUMBERS_INCREASED = '<$msg_more_raiders_01>';
	MSG_COUNTERATTACKS_ACTIVE = '<$msg_counterattacks_01>|<$msg_counterattacks_02>|<$msg_counterattacks_03>';
	MSG_FISHING_DESTROYED = '<$msg_fishing_destroyed_01>';
	MSG_FARM_DESTROYED = '<$msg_farm_destroyed_01>';
	MSG_SOUTHERN_VISITED = '<$msg_southern_visited_01>';
	MSG_CENTRAL_VISITED = '<$msg_central_visited_01>';
	MSG_NORTHERN_VISITED = '<$msg_northern_visited_01>';
	MSG_OUTRO = '<$msg_outro_01>||<$msg_outro_02>|<$msg_outro_03>|<$msg_outro_04>|<$msg_outro_05>|<$msg_outro_06>|<$msg_outro_07>||<$msg_outro_08>||<$msg_outro_09>|<$msg_outro_10>';
	
	RESULT_DEFEND_ALLIES = '<$result_defend_allies>';
	
	FISHING_TROOPS_X = 113;
	FISHING_TROOPS_Y = 71;
	FARM_TROOPS_X = 53;
	FARM_TROOPS_Y = 83;
	
	HERO_FULL_REGEN_TIME = 6000.0;
	HERO_HAYTOW_NAME = '<$hero_haytow_name>';
	HERO_HAYTOW_HP = 250;
	HERO_HAYTOW_COLOR = $00B0FF;
	HERO_GRAHAM_NAME = '<$hero_graham_name>';
	HERO_GRAHAM_HP = 175;
	HERO_GRAHAM_COLOR = $41592F;
	
	TT_SOUTHERN_VILLAGE = 1;
	TT_CENTRAL_VILLAGE = 3;
	TT_NORTHERN_VILLAGE = 4;

var
	TTFiredSouthernVillage, TTFiredCentralVillage, TTFiredNorthernVillage, IsFishingTraining, IsFarmTraining: Boolean;
	DefendFishingObjID, DefendFarmObjID, DefendRefugeesObjID, DestroyBaseObjID, DefeatArmyObjID, PlayerWinTick: Integer;
	DefendFishingObjSt, DefendFarmObjSt, DefendRefugeesObjSt, DestroyBaseObjSt, DefeatArmyObjSt: TKMObjectiveStatus;
	AllyFallbackSpear, AllyFallbackBow, GrahamAID: Integer;
	RefugeesAttack, MaraudersAttackEasy, MaraudersAttackHarder, MaraudersAttackFull: Integer;


// Before the first enemy attacks come, notify the player, and the refugees are to move a spear and a bow formation forward, to help with defending the fishing village. These troops are not to take part in attacks.
procedure PrepareFishingDefense();
begin
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_FISHING_THREATENED, True);
		
	AllyFallbackSpear := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackSpear, 110, 74, 0);
	AllyFallbackBow := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackBow, 110, 76, 0);
	AAIAttackSetDisabledAIDispositions(RefugeesAttack, [AllyFallbackSpear, AllyFallbackBow, GrahamAID]);
	
	AAIAttackSetTargetAreaCenter(MaraudersAttackEasy, 111, 72);
	AAIAttackSetTargetAreaCenter(MaraudersAttackHarder, 111, 72);
	AAIAttackSetTargetAreaCenter(MaraudersAttackFull, 111, 72);
end;


// When the fishing village is defeated, notify the player and move the forward formations to the farm. They are still not to take part in attacks.
procedure FishingDefeated();
begin
	UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendFishingObjID, DefendFishingObjSt, osFailed);
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_FISHING_DESTROYED, True);
	
	AllyFallbackSpear := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackSpear, 56, 86, 0);
	AllyFallbackBow := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackBow, 56, 88, 0);
	AAIAttackSetDisabledAIDispositions(RefugeesAttack, [AllyFallbackSpear, AllyFallbackBow, GrahamAID]);
	
	AAIAttackSetTargetAreaCenter(MaraudersAttackEasy, 63, 86);
	AAIAttackSetTargetAreaCenter(MaraudersAttackHarder, 63, 86);
	AAIAttackSetTargetAreaCenter(MaraudersAttackFull, 63, 86);
end;


// When the farm is defeated, notify the player and move the forward formations back to the refugees' base. They can now start taking part in attacks. The enemies now attack based off their unit position.
procedure FarmDefeated();
begin
	UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendFarmObjID, DefendFarmObjSt, osFailed);
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_FARM_DESTROYED, True);
	
	AllyFallbackSpear := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackSpear, 64, 135, 0);
	AllyFallbackBow := UTAIDispositionMove(PLAYER_REFUGEES, AllyFallbackBow, 64, 137, 0);
	AAIAttackSetDisabledAIDispositions(RefugeesAttack, [GrahamAID]);
	
	AAIAttackAllowTargetAroundSelf(MaraudersAttackEasy);
	AAIAttackAllowTargetAroundSelf(MaraudersAttackHarder);
	AAIAttackAllowTargetAroundSelf(MaraudersAttackFull);
end;


// Called if all objectives are completed. Give the player the outro and then the mission will end with victory.
procedure PlayerWins();
begin
	if not (DefendRefugeesObjSt = osFailed) then
		UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendRefugeesObjID, DefendRefugeesObjSt, osCompleted);
	if not (DefendFishingObjSt = osFailed) then
		UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendFishingObjID, DefendFishingObjSt, osCompleted);
	if not (DefendFarmObjSt = osFailed) then
		UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendFarmObjID, DefendFarmObjSt, osCompleted);
	
	if (PlayerWinTick = -1) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_OUTRO, True);
	PlayerWinTick := AAICurrentTick;
end;


// Periodically called to check whether the players are still supposed to live, and to update the objective statuses.
procedure UpdateObjectives();
begin
	UTObjectiveCheckSurvival(PLAYER_HUMAN, stBuildings);
	UTObjectiveCheckSurvival(PLAYER_REFUGEES, stBuildings);
	UTObjectiveCheckSurvival(PLAYER_FARM_VILLAGE, stBuildings);
	UTObjectiveCheckSurvival(PLAYER_FISHING_VILLAGE, stBuildings);
	
	UTObjectiveTownUpdate(PLAYER_HUMAN, PLAYER_MARAUDERS, DestroyBaseObjID, DestroyBaseObjSt);
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_MARAUDERS, DefeatArmyObjID, DefeatArmyObjSt);
	
	if ((DestroyBaseObjSt = osCompleted)
	and (DefeatArmyObjSt = osCompleted)
	and not (DefendRefugeesObjSt = osFailed)) then
		PlayerWins();
end;


// Makes sure the farm and fishing villages trains militia who are turned into rebels, but once the rebel AIDisposition is full, the AI stops training troops.
procedure UpdateRebelTraining();
begin
	IsFishingTraining := (Length(States.PlayerGetAllUnitsFilter(PLAYER_FISHING_VILLAGE, [utRebelFork])) < 15);
	IsFarmTraining := (Length(States.PlayerGetAllUnitsFilter(PLAYER_FARM_VILLAGE, [utRebelFork])) < 15);
	
	if IsFishingTraining then
		Actions.PlayerAIDispositionAdd(PLAYER_FISHING_VILLAGE, FISHING_TROOPS_X - 1, FISHING_TROOPS_Y, 0, gtMelee, 15, 5, 10)
	else
		Actions.PlayerAIDispositionRemove(PLAYER_FISHING_VILLAGE, FISHING_TROOPS_X - 1, FISHING_TROOPS_Y);
	if IsFarmTraining then
		Actions.PlayerAIDispositionAdd(PLAYER_FARM_VILLAGE, FARM_TROOPS_X - 1, FARM_TROOPS_Y, 0, gtMelee, 15, 5, 10)
	else
		Actions.PlayerAIDispositionRemove(PLAYER_FARM_VILLAGE, FARM_TROOPS_X - 1, FARM_TROOPS_Y);
end;


// Helps the AI towns run more optimally by auto-blocking horse and sheep grain deliveries, wares to storehouses that are not needed, auto-adjusting AI army rates depending on the needs in non-full AIDispositions etc.
procedure OptimizeAI();
begin
	UTOptimizeAIArmyCompositions(PLAYER_REFUGEES, [80, 0, 80, 0, 80, 0, 0, 0], True);
	UTOptimizeAIHouseWareBlocks(PLAYER_REFUGEES, [], [], True, True);
	UTOptimizeAIArmyCompositions(PLAYER_MARAUDERS, [210, 0, 210, 0, 210, 0, 210, 0], True);
	UTOptimizeAIHouseWareBlocks(PLAYER_MARAUDERS, [], [], True, True);
end;


// Finds the first suitable units to be turned into the mission's heroes and makes them change into them.
procedure SetupHeroes();
begin
	UTUnitSetHeroStats(States.UnitAt(11, 148), HERO_HAYTOW_NAME, HERO_HAYTOW_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HAYTOW_HP, 60)), -1, -1, -1, HERO_HAYTOW_COLOR);
	UTUnitSetHeroStats(States.UnitAt(57, 135), HERO_GRAHAM_NAME, HERO_GRAHAM_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_GRAHAM_HP, 60)), -1, -1, -1, HERO_GRAHAM_COLOR);
end;


// Initial setup of the AI players at mission's start.
procedure SetupAI();
var
	defenseAIDs: array of Integer;
begin
	UTPlayerMaxWareDistributions(PLAYER_REFUGEES);
	UTPlayerMaxWareDistributions(PLAYER_FISHING_VILLAGE);
	UTPlayerMaxWareDistributions(PLAYER_FARM_VILLAGE);
	UTPlayerMaxWareDistributions(PLAYER_MARAUDERS);
	Actions.PlayerWareDistribution(PLAYER_REFUGEES, wtGrain, htSheepyard, 0);
	Actions.PlayerWareDistribution(PLAYER_MARAUDERS, wtGrain, htSheepyard, 0);
	IsFarmTraining := True;
	IsFishingTraining := True;
	
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 36, 18));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 68, 14));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 64, 38));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 99, 19));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 97, 19));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 101, 24));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 99, 26));
	
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 76, 45));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 81, 42));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 81, 45));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 87, 43));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 93, 42));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 93, 45));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_MARAUDERS, 98, 45));
	
	MaraudersAttackEasy := AAICreateAttack(PLAYER_MARAUDERS, [PLAYER_FISHING_VILLAGE, PLAYER_FARM_VILLAGE, PLAYER_REFUGEES, PLAYER_HUMAN], atBoth);
	AAIAttackSetTimes(MaraudersAttackEasy, 9000, 18000, 3000);
	AAIAttackSetCompositions(MaraudersAttackEasy, [0, 0, 0, 12], 100, False, True, defenseAIDs);
	
	MaraudersAttackHarder := AAICreateAttack(PLAYER_MARAUDERS, [PLAYER_FISHING_VILLAGE, PLAYER_FARM_VILLAGE, PLAYER_REFUGEES, PLAYER_HUMAN], atBoth);
	AAIAttackSetTimes(MaraudersAttackHarder, 18000, 45000, 3000);
	AAIAttackSetCompositions(MaraudersAttackHarder, [20, 20, 0, 10], 100, False, True, defenseAIDs);
	
	MaraudersAttackFull := AAICreateAttack(PLAYER_MARAUDERS, [PLAYER_FISHING_VILLAGE, PLAYER_FARM_VILLAGE, PLAYER_REFUGEES, PLAYER_HUMAN], atBoth);
	AAIAttackSetTimes(MaraudersAttackFull, 45000, -1, 3000);
	AAIAttackSetCompositions(MaraudersAttackFull, [20, 20, 20, 0], 100, True, True, defenseAIDs);
	
	
	AllyFallbackSpear := Actions.PlayerAIDispositionUIDAdd(PLAYER_REFUGEES, 64, 135, 0, gtAntiHorse, 10, 5, 10);
	AllyFallbackBow := Actions.PlayerAIDispositionUIDAdd(PLAYER_REFUGEES, 64, 137, 0, gtRanged, 10, 5, 10);
	GrahamAID := UTAIDispositionAt(PLAYER_REFUGEES, 57, 135);
	
	RefugeesAttack := AAICreateAttack(PLAYER_REFUGEES, [PLAYER_MARAUDERS], atBoth);
	AAIAttackSetTimes(RefugeesAttack, 45000, -1, 600);
	AAIAttackSetCompositions(RefugeesAttack, [10, 10, 10, 0], 50, True, True, [AllyFallbackSpear, AllyFallbackBow, GrahamAID]);
end;


// Creates the initial objectives for the player.
procedure SetupObjectives();
begin
	PlayerWinTick := -1;
	
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 0, osActive, OBJ_DEFEND_REFUGEES, DefendRefugeesObjID, DefendRefugeesObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 1, osActive, OBJ_DESTROY_BASE, DestroyBaseObjID, DestroyBaseObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 2, osActive, OBJ_DEFEAT_ARMY, DefeatArmyObjID, DefeatArmyObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 3, osActive, OBJ_DEFEND_FISHING, DefendFishingObjID, DefendFishingObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otAdditional, 4, osActive, OBJ_DEFEND_FARM, DefendFarmObjID, DefendFarmObjSt);
end;



procedure OnPlayerDefeated(aPlayer: Integer);
begin
	if (aPlayer = PLAYER_FISHING_VILLAGE) then
		FishingDefeated();

	if (aPlayer = PLAYER_FARM_VILLAGE) then
		FarmDefeated();

	if (aPlayer = PLAYER_REFUGEES) then
	begin
		UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendRefugeesObjID, DefendRefugeesObjSt, osFailed);
		Actions.PlayerMissionResultString(PLAYER_HUMAN, RESULT_DEFEND_ALLIES);
		Actions.PlayerDefeat(PLAYER_HUMAN);
	end;
end;



procedure OnWarriorEquipped(aUnit: Integer; aGroup: Integer);
var
	unitOwner, unitX, unitY: Integer;
begin
	unitOwner := States.UnitOwner(aUnit);
	unitX := States.UnitPositionX(aUnit);
	unitY := States.UnitPositionY(aUnit);
	
	// Farm and fishing village are to train rebels with forks in place of militia.
	if (unitOwner in [PLAYER_FARM_VILLAGE, PLAYER_FISHING_VILLAGE]) then
	begin
		Actions.UnitKill(aUnit, True);
		Actions.GiveGroup(unitOwner, utRebelFork, unitX, unitY, 0, 1, 1);
	end;
end;



procedure OnMissionStart();
begin
	DNInitiateScript(1200, 14400);
	AAIInitiateScript(100, 5, 10, 50);
	SetupHeroes();
	SetupAI();
	SetupObjectives();
	
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_INTRO, True);
end;



procedure OnTick(aTick: Integer);
begin
	DNResolveTick(aTick);
	AAIResolveTick(aTick);
	
	if (aTick mod 100 = 0) then
	begin
		UTOptimizeAIHouseWareBlocks(PLAYER_MARAUDERS, [], [], True, True);
	end;

	// Notify the player that enemy mounted raiders are about to attack and move the refugees in to defend the fishing village.
	if (aTick = 7800) then
		PrepareFishingDefense();

	// Notify the player that enemy attacks are gaining intensity.
	if (aTick = 17700) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_RAIDER_NUMBERS_INCREASED, True);

	// Notify the player that the refugees will be counterattacking, too.
	if (aTick = 45000) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_COUNTERATTACKS_ACTIVE, True);
	
	if (aTick mod 100 = 0) then
		OptimizeAI();
		
	if (aTick - 1 = PlayerWinTick) then
		Actions.PlayerWin([PLAYER_HUMAN], True);
		
	if (aTick mod 10 = 0) then
	begin
		UpdateRebelTraining();
		UpdateObjectives();
	end;
end;


// Manage descriptions of burned down villages on their first player visit.
procedure OnTerrainTrigger(aTriggerId: Integer; aUnit: Integer; aX, aY: Integer);
begin
	if (States.UnitOwner(aUnit) = PLAYER_HUMAN) then
	begin
		if ((aTriggerId = TT_SOUTHERN_VILLAGE) and not TTFiredSouthernVillage) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_SOUTHERN_VISITED, True);
			TTFiredSouthernVillage := True;
			Actions.CinematicBegin();
			Actions.CinematicViewSetTo(aX, aY, 0.0, 0.25);
			Actions.CinematicEnd();
		end;

		if ((aTriggerId = TT_CENTRAL_VILLAGE) and not TTFiredCentralVillage) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_CENTRAL_VISITED, True);
			TTFiredCentralVillage := True;
			Actions.CinematicBegin();
			Actions.CinematicViewSetTo(aX, aY, 0.0, 0.25);
			Actions.CinematicEnd();
		end;
  
		if ((aTriggerId = TT_NORTHERN_VILLAGE) and not TTFiredNorthernVillage) then
		begin
			Actions.PlayerMessage(PLAYER_HUMAN, MSG_NORTHERN_VISITED, True);
			TTFiredNorthernVillage := True;
			Actions.CinematicBegin();
			Actions.CinematicViewSetTo(aX, aY, 0.0, 0.25);
			Actions.CinematicEnd();
		end;
	end;
end;
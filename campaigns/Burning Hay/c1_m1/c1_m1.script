uses
	extra_utils, day_night, attack_ai;

const
	PLAYER_HUMAN = 0;
	PLAYER_BANDITS = 1;
	
	OBJ_KILL_BANDITS = '<$obj_kill_bandits>';
	OBJ_DEFEND_TOWN = '<$obj_defend_town>';
	OBJ_ARMY_SURVIVES = '<$obj_army_survives>';
	
	MSG_INTRO = '<$msg_intro_01>||<$msg_intro_02>|<$msg_intro_03>|<$msg_intro_04>|<$msg_intro_05>|<$msg_intro_06>|<$msg_intro_07>';
	MSG_OUTRO = '<$msg_outro_01>||<$msg_outro_02>|<$msg_outro_03>|<$msg_outro_04>|<$msg_outro_05>|<$msg_outro_06>|<$msg_outro_07>|<$msg_outro_08>|';
	
	HERO_FULL_REGEN_TIME = 6000.0;
	HERO_HAYTOW_NAME = '<$hero_haytow_name>';
	HERO_HAYTOW_HP = 200;
	HERO_HAYTOW_COLOR = $00B0FF;
	HERO_ASTON_NAME = '<$hero_aston_name>';
	HERO_ASTON_HP = 150;
	HERO_ASTON_COLOR = $00B0FF;
	
var
	DefeatBanditsObjID, DefendTownObjID, ArmySurviveObjID, PlayerWinTick, CurrentTick: Integer;
	DefeatBanditsObjSt, DefendTownObjSt, ArmySurviveObjSt: TKMObjectiveStatus;


// Called if all objectives are completed. Give the player the outro and then the mission will end with victory.
procedure PlayerWins();
begin
	UTObjectiveStatusUpdate(PLAYER_HUMAN, ArmySurviveObjID, ArmySurviveObjSt, osCompleted);
	UTObjectiveStatusUpdate(PLAYER_HUMAN, DefendTownObjID, DefendTownObjSt, osCompleted);
	
	if (PlayerWinTick = -1) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_OUTRO, True);
	PlayerWinTick := CurrentTick;
end;


// Periodically called to check whether the players are still supposed to live, and to update the objective statuses.
procedure UpdateObjectives();
begin
	UTObjectiveCheckSurvival(PLAYER_HUMAN, stBuildingsAndArmy);
	
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_BANDITS, DefeatBanditsObjID, DefeatBanditsObjSt);
		
	if (DefeatBanditsObjSt = osCompleted) then
		PlayerWins();
end;


// Finds the first suitable units to be turned into the mission's heroes and makes them change into them.
procedure SetupHeroes();
begin
	UTUnitSetHeroStats(States.UnitAt(69, 88), HERO_HAYTOW_NAME, HERO_HAYTOW_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HAYTOW_HP, 60)), -1, -1, -1, HERO_HAYTOW_COLOR);
	UTUnitSetHeroStats(States.UnitAt(70, 88), HERO_ASTON_NAME, HERO_ASTON_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_ASTON_HP, 60)), -1, -1, -1, HERO_ASTON_COLOR);
end;


// Creates the initial objectives for the player.
procedure SetupObjectives();
begin
	PlayerWinTick := -1;
	
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 0, osActive, OBJ_KILL_BANDITS, DefeatBanditsObjID, DefeatBanditsObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 1, osActive, OBJ_DEFEND_TOWN, DefendTownObjID, DefendTownObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 2, osActive, OBJ_ARMY_SURVIVES, ArmySurviveObjID, ArmySurviveObjSt);
end;


// Initial setup of the AI players at mission's start.
procedure SetupAI();
var
	banditAttack: Integer;
begin
	banditAttack := AAICreateAttack(PLAYER_BANDITS, [PLAYER_HUMAN], atBoth);
	AAIAttackSetTimes(banditAttack, 0, 2, 600);
	AAIAttackSetCompositions(banditAttack, [States.StatArmyCount(PLAYER_BANDITS), 0, 0, 0], 100, False, True, []);
end;



procedure OnMissionStart();
begin
	DNInitiateScript(8400, 14400);
	AAIInitiateScript(100, 5, 10, 50);
	SetupHeroes();
	SetupAI();
	SetupObjectives();
	
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_INTRO, True);
end;



procedure OnTick(aTick: Integer);
begin
	DNResolveTick(aTick);
	AAIResolveTick(aTick);
	CurrentTick := aTick;

	if (aTick - 1 = PlayerWinTick) then
		Actions.PlayerWin([PLAYER_HUMAN], False);
		
	if (aTick mod 10 = 0) then
		UpdateObjectives();
end;
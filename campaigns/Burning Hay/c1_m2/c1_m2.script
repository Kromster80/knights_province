uses
	extra_utils, day_night, attack_ai;

const
	PLAYER_HUMAN = 0;
	PLAYER_BANDITS = 1;
	PLAYER_ROYAL_TROOPS = 2;
	
	OBJ_BANDIT_TOWN = '<$obj_destroy_bandit_town>';
	OBJ_BANDIT_ARMY = '<$obj_defeat_bandit_army>';
	
	MSG_INTRO = '<$msg_intro_01>||<$msg_intro_02>';
	MSG_JOIN_FORCES = '<$msg_join_forces_01>|<$msg_join_forces_02>|<$msg_join_forces_03>|<$msg_join_forces_04>';
	MSG_MORE_COMING = '<$msg_more_coming_01>|<$msg_more_coming_02>|<$msg_more_coming_03>';
	MSG_ATTACKS_RESUMING = '<$msg_attacks_resuming_01>|<$msg_attacks_resuming_02>|<$msg_attacks_resuming_03>|<$msg_attacks_resuming_04>|<$msg_attacks_resuming_05>|<$msg_attacks_resuming_06>|<$msg_attacks_resuming_07>|<$msg_attacks_resuming_08>';
	MSG_OUTRO = '<$msg_outro_01>||<$msg_outro_02>|<$msg_outro_03>|<$msg_outro_04>|<$msg_outro_05>|<$msg_outro_06>|<$msg_outro_07>|<$msg_outro_08>|<$msg_outro_09>|<$msg_outro_10>|<$msg_outro_11>|';
	
	HERO_FULL_REGEN_TIME = 6000.0;
	HERO_HAYTOW_NAME = '<$hero_haytow_name>';
	HERO_HAYTOW_HP = 225;
	HERO_HAYTOW_COLOR = $00B0FF;
	HERO_GRAHAM_NAME = '<$hero_graham_name>';
	HERO_GRAHAM_HP = 150;
	HERO_GRAHAM_COLOR = $41592F;
	HERO_LINTON_NAME = '<$hero_linton_name>';
	HERO_LINTON_HP = 150;
	HERO_LINTON_COLOR = $A040A0;
	
	TT_HAYTOW_ARRIVES = 1;

var
	TTFiredHaytowArrives: Boolean;
	DestroyBanditTownObjID, DefeatBanditArmyObjID, PlayerWinTick: Integer;
	DestroyBanditTownObjSt, DefeatBanditArmyObjSt: TKMObjectiveStatus;


// Gives all of the royal units, houses and groups to the player. Called when the player arrives to the initial battle's proximity.
procedure PassControlOver();
var
	allGroups, allHouses, allUnits: array of Integer;
	i: Integer;
begin
	allGroups := States.PlayerGetAllGroups(PLAYER_ROYAL_TROOPS);
	allHouses := States.PlayerGetAllHouses(PLAYER_ROYAL_TROOPS);
	allUnits := States.PlayerGetAllUnits(PLAYER_ROYAL_TROOPS);
	// Currently, there is unfortunately no way of doing this with roads. Current workaround is that the roads are already player's.

	for i := 0 to High(allGroups) do
		Actions.GroupOwnerChange(allGroups[i], PLAYER_HUMAN);
	for i := 0 to High(allHouses) do
		UTHouseOwnerChangeImproved(allHouses[i], PLAYER_HUMAN);
	for i := 0 to High(allUnits) do
		Actions.UnitOwnerChange(allUnits[i], PLAYER_HUMAN);

	Actions.PlayerMessage(PLAYER_HUMAN, MSG_JOIN_FORCES, True);
end;


// Called if all objectives are completed. Give the player the outro and then the mission will end with victory.
procedure PlayerWins();
begin
	if (PlayerWinTick = -1) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_OUTRO, True);
	PlayerWinTick := AAICurrentTick;
end;


// Periodically called to check whether the players are still supposed to live, and to update the objective statuses.
procedure UpdateObjectives();
begin
	if TTFiredHaytowArrives then
		UTObjectiveCheckSurvival(PLAYER_HUMAN, stBuildings)
	else
	begin
		UTObjectiveCheckSurvival(PLAYER_ROYAL_TROOPS, stBuildings);
		UTObjectiveCheckSurvival(PLAYER_HUMAN, stArmy);
	end;
	
	UTObjectiveArmyUpdate(PLAYER_HUMAN, PLAYER_BANDITS, DefeatBanditArmyObjID, DefeatBanditArmyObjSt);
	UTObjectiveTownUpdate(PLAYER_HUMAN, PLAYER_BANDITS, DestroyBanditTownObjID, DestroyBanditTownObjSt);
	
	if (DestroyBanditTownObjSt = osCompleted)
	and (DefeatBanditArmyObjSt = osCompleted) then
		PlayerWins();
end;


// Finds the first suitable units to be turned into the mission's heroes and makes them change into them.
procedure SetupHeroes();
begin
	UTUnitSetHeroStats(States.UnitAt(53, 86), HERO_HAYTOW_NAME, HERO_HAYTOW_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_HAYTOW_HP, 60)), -1, -1, -1, HERO_HAYTOW_COLOR);
	UTUnitSetHeroStats(States.UnitAt(16, 12), HERO_GRAHAM_NAME, HERO_GRAHAM_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_GRAHAM_HP, 60)), -1, -1, -1, HERO_GRAHAM_COLOR);
	UTUnitSetHeroStats(States.UnitAt(29, 64), HERO_LINTON_NAME, HERO_LINTON_HP, Round(HERO_FULL_REGEN_TIME / Utils.MaxI(HERO_LINTON_HP, 60)), -1, -1, -1, HERO_LINTON_COLOR);
end;


// Initial setup of the AI players at mission's start.
procedure SetupAI();
var
	defenseAIDs: array of Integer;
	attackWave1, attackWave2, attackPersistent: Integer;
begin
	// Form town defense focused AIDs. Exclude them from the attacks.
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_BANDITS, 16, 12));
	Utils.ArrayAppendI(defenseAIDs, UTAIDispositionAt(PLAYER_BANDITS, 37, 9));

	// The first wave at the beginning of the mission, following the few initial troops.
	attackWave1 := AAICreateAttack(PLAYER_BANDITS, [PLAYER_HUMAN, PLAYER_ROYAL_TROOPS], atBoth);
	AAIAttackSetTimes(attackWave1, 0, 2, 600);
	AAIAttackSetCompositions(attackWave1, [24, 0, 0, 0], 100, False, True, defenseAIDs);
	
	// The second wave a bit later, to actually hurt the player's initial army.
	attackWave2 := AAICreateAttack(PLAYER_BANDITS, [PLAYER_HUMAN, PLAYER_ROYAL_TROOPS], atBoth);
	AAIAttackSetTimes(attackWave2, 900, 910, 600);
	AAIAttackSetCompositions(attackWave2, [24, 0, 0, 0], 100, False, True, defenseAIDs);
	
	// The attacks that start coming if the player takes too long.
	attackPersistent := AAICreateAttack(PLAYER_BANDITS, [PLAYER_HUMAN, PLAYER_ROYAL_TROOPS], atBoth);
	AAIAttackSetTimes(attackPersistent, 42000, -1, 600);
	AAIAttackSetCompositions(attackPersistent, [24, 0, 0, 0], 50, False, True, defenseAIDs);
end;


// Creates the initial objectives for the player.
procedure SetupObjectives();
begin
	PlayerWinTick := -1;
	
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 0, osActive, OBJ_BANDIT_TOWN, DestroyBanditTownObjID, DestroyBanditTownObjSt);
	UTObjectiveCreate(PLAYER_HUMAN, otMain, 1, osActive, OBJ_BANDIT_ARMY, DefeatBanditArmyObjID, DefeatBanditArmyObjSt);
end;



procedure OnPlayerDefeated(aPlayer: Integer);
begin
	if (aPlayer = PLAYER_ROYAL_TROOPS) then
		Actions.PlayerDefeat(PLAYER_HUMAN);
end;



procedure OnMissionStart();
begin
	DNInitiateScript(300, 14400);
	AAIInitiateScript(100, 5, 10, 50);
	SetupHeroes();
	SetupAI();
	SetupObjectives();
	
	Actions.PlayerMessage(PLAYER_HUMAN, MSG_INTRO, True);
end;



procedure OnTick(aTick: Integer);
begin
	DNResolveTick(aTick);
	AAIResolveTick(aTick);
	
	// More of the enemies coming!
	if (aTick = 1000) and TTFiredHaytowArrives then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_MORE_COMING, True);

	// Regular attack on the player's base will start in 10 minutes - give the player warning (if the enemy has still army left to be of threat).
	if (aTick = 36000) and (States.StatArmyCount(PLAYER_BANDITS) >= 32) then
		Actions.PlayerMessage(PLAYER_HUMAN, MSG_ATTACKS_RESUMING, True);
		
	if (aTick mod 100 = 0) then
		UTOptimizeAIHouseWareBlocks(PLAYER_BANDITS, [], [], True, True);
	
	if (aTick - 1 = PlayerWinTick) then
		Actions.PlayerWin([PLAYER_HUMAN], False);
		
	if (aTick mod 10 = 0) then
		UpdateObjectives();
end;



procedure OnTerrainTrigger(aTriggerId: Integer; aUnit: Integer; aX, aY: Integer);
begin
	if (States.UnitOwner(aUnit) = PLAYER_HUMAN) then
	begin
		if ((aTriggerId = TT_HAYTOW_ARRIVES) and not TTFiredHaytowArrives) then
		begin
			TTFiredHaytowArrives := true;
			PassControlOver();
		end;
	end;
end;